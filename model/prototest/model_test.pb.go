// Copyright (c) 2018 Uber Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.14.0
// source: model_test.proto

package prototest

import (
	reflect "reflect"
	sync "sync"

	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SpanRefType int32

const (
	SpanRefType_CHILD_OF     SpanRefType = 0
	SpanRefType_FOLLOWS_FROM SpanRefType = 1
)

// Enum value maps for SpanRefType.
var (
	SpanRefType_name = map[int32]string{
		0: "CHILD_OF",
		1: "FOLLOWS_FROM",
	}
	SpanRefType_value = map[string]int32{
		"CHILD_OF":     0,
		"FOLLOWS_FROM": 1,
	}
)

func (x SpanRefType) Enum() *SpanRefType {
	p := new(SpanRefType)
	*p = x
	return p
}

func (x SpanRefType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SpanRefType) Descriptor() protoreflect.EnumDescriptor {
	return file_model_test_proto_enumTypes[0].Descriptor()
}

func (SpanRefType) Type() protoreflect.EnumType {
	return &file_model_test_proto_enumTypes[0]
}

func (x SpanRefType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SpanRefType.Descriptor instead.
func (SpanRefType) EnumDescriptor() ([]byte, []int) {
	return file_model_test_proto_rawDescGZIP(), []int{0}
}

type SpanRef struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TraceId []byte      `protobuf:"bytes,1,opt,name=trace_id,json=traceId,proto3" json:"trace_id,omitempty"`
	SpanId  []byte      `protobuf:"bytes,2,opt,name=span_id,json=spanId,proto3" json:"span_id,omitempty"`
	RefType SpanRefType `protobuf:"varint,3,opt,name=ref_type,json=refType,proto3,enum=prototest.SpanRefType" json:"ref_type,omitempty"`
}

func (x *SpanRef) Reset() {
	*x = SpanRef{}
	if protoimpl.UnsafeEnabled {
		mi := &file_model_test_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpanRef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpanRef) ProtoMessage() {}

func (x *SpanRef) ProtoReflect() protoreflect.Message {
	mi := &file_model_test_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpanRef.ProtoReflect.Descriptor instead.
func (*SpanRef) Descriptor() ([]byte, []int) {
	return file_model_test_proto_rawDescGZIP(), []int{0}
}

func (x *SpanRef) GetTraceId() []byte {
	if x != nil {
		return x.TraceId
	}
	return nil
}

func (x *SpanRef) GetSpanId() []byte {
	if x != nil {
		return x.SpanId
	}
	return nil
}

func (x *SpanRef) GetRefType() SpanRefType {
	if x != nil {
		return x.RefType
	}
	return SpanRefType_CHILD_OF
}

var File_model_test_proto protoreflect.FileDescriptor

var file_model_test_proto_rawDesc = []byte{
	0x0a, 0x10, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x09, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x74, 0x65, 0x73, 0x74, 0x22, 0x70, 0x0a,
	0x07, 0x53, 0x70, 0x61, 0x6e, 0x52, 0x65, 0x66, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x72, 0x61, 0x63,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x74, 0x72, 0x61, 0x63,
	0x65, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x70, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x73, 0x70, 0x61, 0x6e, 0x49, 0x64, 0x12, 0x31, 0x0a, 0x08,
	0x72, 0x65, 0x66, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x70, 0x61, 0x6e, 0x52,
	0x65, 0x66, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x72, 0x65, 0x66, 0x54, 0x79, 0x70, 0x65, 0x2a,
	0x2d, 0x0a, 0x0b, 0x53, 0x70, 0x61, 0x6e, 0x52, 0x65, 0x66, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0c,
	0x0a, 0x08, 0x43, 0x48, 0x49, 0x4c, 0x44, 0x5f, 0x4f, 0x46, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c,
	0x46, 0x4f, 0x4c, 0x4c, 0x4f, 0x57, 0x53, 0x5f, 0x46, 0x52, 0x4f, 0x4d, 0x10, 0x01, 0x42, 0x0d,
	0x5a, 0x0b, 0x2e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x74, 0x65, 0x73, 0x74, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_model_test_proto_rawDescOnce sync.Once
	file_model_test_proto_rawDescData = file_model_test_proto_rawDesc
)

func file_model_test_proto_rawDescGZIP() []byte {
	file_model_test_proto_rawDescOnce.Do(func() {
		file_model_test_proto_rawDescData = protoimpl.X.CompressGZIP(file_model_test_proto_rawDescData)
	})
	return file_model_test_proto_rawDescData
}

var file_model_test_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_model_test_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_model_test_proto_goTypes = []interface{}{
	(SpanRefType)(0), // 0: prototest.SpanRefType
	(*SpanRef)(nil),  // 1: prototest.SpanRef
}
var file_model_test_proto_depIdxs = []int32{
	0, // 0: prototest.SpanRef.ref_type:type_name -> prototest.SpanRefType
	1, // [1:1] is the sub-list for method output_type
	1, // [1:1] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_model_test_proto_init() }
func file_model_test_proto_init() {
	if File_model_test_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_model_test_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpanRef); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_model_test_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_model_test_proto_goTypes,
		DependencyIndexes: file_model_test_proto_depIdxs,
		EnumInfos:         file_model_test_proto_enumTypes,
		MessageInfos:      file_model_test_proto_msgTypes,
	}.Build()
	File_model_test_proto = out.File
	file_model_test_proto_rawDesc = nil
	file_model_test_proto_goTypes = nil
	file_model_test_proto_depIdxs = nil
}

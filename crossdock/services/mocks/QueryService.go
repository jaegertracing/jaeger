// Copyright (c) The Jaeger Authors.
// SPDX-License-Identifier: Apache-2.0
//
// Run 'make generate-mocks' to regenerate.

// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"

	uimodel "github.com/jaegertracing/jaeger/internal/uimodel"
)

// QueryService is an autogenerated mock type for the QueryService type
type QueryService struct {
	mock.Mock
}

type QueryService_Expecter struct {
	mock *mock.Mock
}

func (_m *QueryService) EXPECT() *QueryService_Expecter {
	return &QueryService_Expecter{mock: &_m.Mock}
}

// GetTraces provides a mock function with given fields: serviceName, operation, tags
func (_m *QueryService) GetTraces(serviceName string, operation string, tags map[string]string) ([]*uimodel.Trace, error) {
	ret := _m.Called(serviceName, operation, tags)

	if len(ret) == 0 {
		panic("no return value specified for GetTraces")
	}

	var r0 []*uimodel.Trace
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, map[string]string) ([]*uimodel.Trace, error)); ok {
		return rf(serviceName, operation, tags)
	}
	if rf, ok := ret.Get(0).(func(string, string, map[string]string) []*uimodel.Trace); ok {
		r0 = rf(serviceName, operation, tags)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*uimodel.Trace)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, map[string]string) error); ok {
		r1 = rf(serviceName, operation, tags)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// QueryService_GetTraces_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTraces'
type QueryService_GetTraces_Call struct {
	*mock.Call
}

// GetTraces is a helper method to define mock.On call
//   - serviceName string
//   - operation string
//   - tags map[string]string
func (_e *QueryService_Expecter) GetTraces(serviceName interface{}, operation interface{}, tags interface{}) *QueryService_GetTraces_Call {
	return &QueryService_GetTraces_Call{Call: _e.mock.On("GetTraces", serviceName, operation, tags)}
}

func (_c *QueryService_GetTraces_Call) Run(run func(serviceName string, operation string, tags map[string]string)) *QueryService_GetTraces_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(map[string]string))
	})
	return _c
}

func (_c *QueryService_GetTraces_Call) Return(_a0 []*uimodel.Trace, _a1 error) *QueryService_GetTraces_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *QueryService_GetTraces_Call) RunAndReturn(run func(string, string, map[string]string) ([]*uimodel.Trace, error)) *QueryService_GetTraces_Call {
	_c.Call.Return(run)
	return _c
}

// NewQueryService creates a new instance of QueryService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewQueryService(t interface {
	mock.TestingT
	Cleanup(func())
}) *QueryService {
	mock := &QueryService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

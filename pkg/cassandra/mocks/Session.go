// Copyright (c) The Jaeger Authors.
// SPDX-License-Identifier: Apache-2.0
//
// Run 'make generate-mocks' to regenerate.

// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	cassandra "github.com/jaegertracing/jaeger/pkg/cassandra"
	mock "github.com/stretchr/testify/mock"
)

// Session is an autogenerated mock type for the Session type
type Session struct {
	mock.Mock
}

// Close provides a mock function with no fields
func (_m *Session) Close() {
	_m.Called()
}

// Query provides a mock function with given fields: stmt, values
func (_m *Session) Query(stmt string, values ...any) cassandra.Query {
	ret := _m.Called(stmt, values)

	if len(ret) == 0 {
		panic("no return value specified for Query")
	}

	var r0 cassandra.Query
	if rf, ok := ret.Get(0).(func(string, ...any) cassandra.Query); ok {
		r0 = rf(stmt, values...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(cassandra.Query)
		}
	}

	return r0
}

// NewSession creates a new instance of Session. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSession(t interface {
	mock.TestingT
	Cleanup(func())
}) *Session {
	mock := &Session{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify
// Copyright (c) The Jaeger Authors.
// SPDX-License-Identifier: Apache-2.0
//
// Run 'make generate-mocks' to regenerate.

package mocks

import (
	"github.com/jaegertracing/jaeger/cmd/ingester/app/processor"
	mock "github.com/stretchr/testify/mock"
)

// NewSpanProcessor creates a new instance of SpanProcessor. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSpanProcessor(t interface {
	mock.TestingT
	Cleanup(func())
}) *SpanProcessor {
	mock := &SpanProcessor{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// SpanProcessor is an autogenerated mock type for the SpanProcessor type
type SpanProcessor struct {
	mock.Mock
}

type SpanProcessor_Expecter struct {
	mock *mock.Mock
}

func (_m *SpanProcessor) EXPECT() *SpanProcessor_Expecter {
	return &SpanProcessor_Expecter{mock: &_m.Mock}
}

// Close provides a mock function for the type SpanProcessor
func (_mock *SpanProcessor) Close() error {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func() error); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// SpanProcessor_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type SpanProcessor_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *SpanProcessor_Expecter) Close() *SpanProcessor_Close_Call {
	return &SpanProcessor_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *SpanProcessor_Close_Call) Run(run func()) *SpanProcessor_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *SpanProcessor_Close_Call) Return(err error) *SpanProcessor_Close_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *SpanProcessor_Close_Call) RunAndReturn(run func() error) *SpanProcessor_Close_Call {
	_c.Call.Return(run)
	return _c
}

// Process provides a mock function for the type SpanProcessor
func (_mock *SpanProcessor) Process(input processor.Message) error {
	ret := _mock.Called(input)

	if len(ret) == 0 {
		panic("no return value specified for Process")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(processor.Message) error); ok {
		r0 = returnFunc(input)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// SpanProcessor_Process_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Process'
type SpanProcessor_Process_Call struct {
	*mock.Call
}

// Process is a helper method to define mock.On call
//   - input
func (_e *SpanProcessor_Expecter) Process(input interface{}) *SpanProcessor_Process_Call {
	return &SpanProcessor_Process_Call{Call: _e.mock.On("Process", input)}
}

func (_c *SpanProcessor_Process_Call) Run(run func(input processor.Message)) *SpanProcessor_Process_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(processor.Message))
	})
	return _c
}

func (_c *SpanProcessor_Process_Call) Return(err error) *SpanProcessor_Process_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *SpanProcessor_Process_Call) RunAndReturn(run func(input processor.Message) error) *SpanProcessor_Process_Call {
	_c.Call.Return(run)
	return _c
}

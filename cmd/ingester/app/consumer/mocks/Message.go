// Copyright (c) The Jaeger Authors.
// SPDX-License-Identifier: Apache-2.0
//
// Run 'make generate-mocks' to regenerate.

// Code generated by mockery. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// Message is an autogenerated mock type for the Message type
type Message struct {
	mock.Mock
}

type Message_Expecter struct {
	mock *mock.Mock
}

func (_m *Message) EXPECT() *Message_Expecter {
	return &Message_Expecter{mock: &_m.Mock}
}

// Key provides a mock function with no fields
func (_m *Message) Key() []byte {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Key")
	}

	var r0 []byte
	if rf, ok := ret.Get(0).(func() []byte); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	return r0
}

// Message_Key_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Key'
type Message_Key_Call struct {
	*mock.Call
}

// Key is a helper method to define mock.On call
func (_e *Message_Expecter) Key() *Message_Key_Call {
	return &Message_Key_Call{Call: _e.mock.On("Key")}
}

func (_c *Message_Key_Call) Run(run func()) *Message_Key_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Message_Key_Call) Return(_a0 []byte) *Message_Key_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Message_Key_Call) RunAndReturn(run func() []byte) *Message_Key_Call {
	_c.Call.Return(run)
	return _c
}

// Offset provides a mock function with no fields
func (_m *Message) Offset() int64 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Offset")
	}

	var r0 int64
	if rf, ok := ret.Get(0).(func() int64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int64)
	}

	return r0
}

// Message_Offset_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Offset'
type Message_Offset_Call struct {
	*mock.Call
}

// Offset is a helper method to define mock.On call
func (_e *Message_Expecter) Offset() *Message_Offset_Call {
	return &Message_Offset_Call{Call: _e.mock.On("Offset")}
}

func (_c *Message_Offset_Call) Run(run func()) *Message_Offset_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Message_Offset_Call) Return(_a0 int64) *Message_Offset_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Message_Offset_Call) RunAndReturn(run func() int64) *Message_Offset_Call {
	_c.Call.Return(run)
	return _c
}

// Partition provides a mock function with no fields
func (_m *Message) Partition() int32 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Partition")
	}

	var r0 int32
	if rf, ok := ret.Get(0).(func() int32); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int32)
	}

	return r0
}

// Message_Partition_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Partition'
type Message_Partition_Call struct {
	*mock.Call
}

// Partition is a helper method to define mock.On call
func (_e *Message_Expecter) Partition() *Message_Partition_Call {
	return &Message_Partition_Call{Call: _e.mock.On("Partition")}
}

func (_c *Message_Partition_Call) Run(run func()) *Message_Partition_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Message_Partition_Call) Return(_a0 int32) *Message_Partition_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Message_Partition_Call) RunAndReturn(run func() int32) *Message_Partition_Call {
	_c.Call.Return(run)
	return _c
}

// Topic provides a mock function with no fields
func (_m *Message) Topic() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Topic")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Message_Topic_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Topic'
type Message_Topic_Call struct {
	*mock.Call
}

// Topic is a helper method to define mock.On call
func (_e *Message_Expecter) Topic() *Message_Topic_Call {
	return &Message_Topic_Call{Call: _e.mock.On("Topic")}
}

func (_c *Message_Topic_Call) Run(run func()) *Message_Topic_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Message_Topic_Call) Return(_a0 string) *Message_Topic_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Message_Topic_Call) RunAndReturn(run func() string) *Message_Topic_Call {
	_c.Call.Return(run)
	return _c
}

// Value provides a mock function with no fields
func (_m *Message) Value() []byte {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Value")
	}

	var r0 []byte
	if rf, ok := ret.Get(0).(func() []byte); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	return r0
}

// Message_Value_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Value'
type Message_Value_Call struct {
	*mock.Call
}

// Value is a helper method to define mock.On call
func (_e *Message_Expecter) Value() *Message_Value_Call {
	return &Message_Value_Call{Call: _e.mock.On("Value")}
}

func (_c *Message_Value_Call) Run(run func()) *Message_Value_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Message_Value_Call) Return(_a0 []byte) *Message_Value_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Message_Value_Call) RunAndReturn(run func() []byte) *Message_Value_Call {
	_c.Call.Return(run)
	return _c
}

// NewMessage creates a new instance of Message. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMessage(t interface {
	mock.TestingT
	Cleanup(func())
}) *Message {
	mock := &Message{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

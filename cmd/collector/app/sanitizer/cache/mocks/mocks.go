// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify
// Copyright (c) The Jaeger Authors.
// SPDX-License-Identifier: Apache-2.0
//
// Run 'make generate-mocks' to regenerate.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
)

// NewServiceAliasMappingStorage creates a new instance of ServiceAliasMappingStorage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewServiceAliasMappingStorage(t interface {
	mock.TestingT
	Cleanup(func())
}) *ServiceAliasMappingStorage {
	mock := &ServiceAliasMappingStorage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// ServiceAliasMappingStorage is an autogenerated mock type for the ServiceAliasMappingStorage type
type ServiceAliasMappingStorage struct {
	mock.Mock
}

type ServiceAliasMappingStorage_Expecter struct {
	mock *mock.Mock
}

func (_m *ServiceAliasMappingStorage) EXPECT() *ServiceAliasMappingStorage_Expecter {
	return &ServiceAliasMappingStorage_Expecter{mock: &_m.Mock}
}

// Load provides a mock function for the type ServiceAliasMappingStorage
func (_mock *ServiceAliasMappingStorage) Load() (map[string]string, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Load")
	}

	var r0 map[string]string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() (map[string]string, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() map[string]string); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]string)
		}
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// ServiceAliasMappingStorage_Load_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Load'
type ServiceAliasMappingStorage_Load_Call struct {
	*mock.Call
}

// Load is a helper method to define mock.On call
func (_e *ServiceAliasMappingStorage_Expecter) Load() *ServiceAliasMappingStorage_Load_Call {
	return &ServiceAliasMappingStorage_Load_Call{Call: _e.mock.On("Load")}
}

func (_c *ServiceAliasMappingStorage_Load_Call) Run(run func()) *ServiceAliasMappingStorage_Load_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ServiceAliasMappingStorage_Load_Call) Return(stringToString map[string]string, err error) *ServiceAliasMappingStorage_Load_Call {
	_c.Call.Return(stringToString, err)
	return _c
}

func (_c *ServiceAliasMappingStorage_Load_Call) RunAndReturn(run func() (map[string]string, error)) *ServiceAliasMappingStorage_Load_Call {
	_c.Call.Return(run)
	return _c
}

// Save provides a mock function for the type ServiceAliasMappingStorage
func (_mock *ServiceAliasMappingStorage) Save(data map[string]string) error {
	ret := _mock.Called(data)

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(map[string]string) error); ok {
		r0 = returnFunc(data)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// ServiceAliasMappingStorage_Save_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Save'
type ServiceAliasMappingStorage_Save_Call struct {
	*mock.Call
}

// Save is a helper method to define mock.On call
//   - data
func (_e *ServiceAliasMappingStorage_Expecter) Save(data interface{}) *ServiceAliasMappingStorage_Save_Call {
	return &ServiceAliasMappingStorage_Save_Call{Call: _e.mock.On("Save", data)}
}

func (_c *ServiceAliasMappingStorage_Save_Call) Run(run func(data map[string]string)) *ServiceAliasMappingStorage_Save_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(map[string]string))
	})
	return _c
}

func (_c *ServiceAliasMappingStorage_Save_Call) Return(err error) *ServiceAliasMappingStorage_Save_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *ServiceAliasMappingStorage_Save_Call) RunAndReturn(run func(data map[string]string) error) *ServiceAliasMappingStorage_Save_Call {
	_c.Call.Return(run)
	return _c
}

// NewServiceAliasMappingExternalSource creates a new instance of ServiceAliasMappingExternalSource. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewServiceAliasMappingExternalSource(t interface {
	mock.TestingT
	Cleanup(func())
}) *ServiceAliasMappingExternalSource {
	mock := &ServiceAliasMappingExternalSource{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// ServiceAliasMappingExternalSource is an autogenerated mock type for the ServiceAliasMappingExternalSource type
type ServiceAliasMappingExternalSource struct {
	mock.Mock
}

type ServiceAliasMappingExternalSource_Expecter struct {
	mock *mock.Mock
}

func (_m *ServiceAliasMappingExternalSource) EXPECT() *ServiceAliasMappingExternalSource_Expecter {
	return &ServiceAliasMappingExternalSource_Expecter{mock: &_m.Mock}
}

// Load provides a mock function for the type ServiceAliasMappingExternalSource
func (_mock *ServiceAliasMappingExternalSource) Load() (map[string]string, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Load")
	}

	var r0 map[string]string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() (map[string]string, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() map[string]string); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]string)
		}
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// ServiceAliasMappingExternalSource_Load_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Load'
type ServiceAliasMappingExternalSource_Load_Call struct {
	*mock.Call
}

// Load is a helper method to define mock.On call
func (_e *ServiceAliasMappingExternalSource_Expecter) Load() *ServiceAliasMappingExternalSource_Load_Call {
	return &ServiceAliasMappingExternalSource_Load_Call{Call: _e.mock.On("Load")}
}

func (_c *ServiceAliasMappingExternalSource_Load_Call) Run(run func()) *ServiceAliasMappingExternalSource_Load_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ServiceAliasMappingExternalSource_Load_Call) Return(stringToString map[string]string, err error) *ServiceAliasMappingExternalSource_Load_Call {
	_c.Call.Return(stringToString, err)
	return _c
}

func (_c *ServiceAliasMappingExternalSource_Load_Call) RunAndReturn(run func() (map[string]string, error)) *ServiceAliasMappingExternalSource_Load_Call {
	_c.Call.Return(run)
	return _c
}

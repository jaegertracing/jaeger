// Copyright (c) The Jaeger Authors.
// SPDX-License-Identifier: Apache-2.0
//
// Run 'make generate-mocks' to regenerate.

// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	pcommon "go.opentelemetry.io/collector/pdata/pcommon"

	ptrace "go.opentelemetry.io/collector/pdata/ptrace"

	tracestore "github.com/jaegertracing/jaeger/storage_v2/tracestore"
)

// Reader is an autogenerated mock type for the Reader type
type Reader struct {
	mock.Mock
}

// FindTraceIDs provides a mock function with given fields: ctx, query
func (_m *Reader) FindTraceIDs(ctx context.Context, query tracestore.TraceQueryParameters) ([]pcommon.TraceID, error) {
	ret := _m.Called(ctx, query)

	if len(ret) == 0 {
		panic("no return value specified for FindTraceIDs")
	}

	var r0 []pcommon.TraceID
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, tracestore.TraceQueryParameters) ([]pcommon.TraceID, error)); ok {
		return rf(ctx, query)
	}
	if rf, ok := ret.Get(0).(func(context.Context, tracestore.TraceQueryParameters) []pcommon.TraceID); ok {
		r0 = rf(ctx, query)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]pcommon.TraceID)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, tracestore.TraceQueryParameters) error); ok {
		r1 = rf(ctx, query)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindTraces provides a mock function with given fields: ctx, query
func (_m *Reader) FindTraces(ctx context.Context, query tracestore.TraceQueryParameters) ([]ptrace.Traces, error) {
	ret := _m.Called(ctx, query)

	if len(ret) == 0 {
		panic("no return value specified for FindTraces")
	}

	var r0 []ptrace.Traces
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, tracestore.TraceQueryParameters) ([]ptrace.Traces, error)); ok {
		return rf(ctx, query)
	}
	if rf, ok := ret.Get(0).(func(context.Context, tracestore.TraceQueryParameters) []ptrace.Traces); ok {
		r0 = rf(ctx, query)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]ptrace.Traces)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, tracestore.TraceQueryParameters) error); ok {
		r1 = rf(ctx, query)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOperations provides a mock function with given fields: ctx, query
func (_m *Reader) GetOperations(ctx context.Context, query tracestore.OperationQueryParameters) ([]tracestore.Operation, error) {
	ret := _m.Called(ctx, query)

	if len(ret) == 0 {
		panic("no return value specified for GetOperations")
	}

	var r0 []tracestore.Operation
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, tracestore.OperationQueryParameters) ([]tracestore.Operation, error)); ok {
		return rf(ctx, query)
	}
	if rf, ok := ret.Get(0).(func(context.Context, tracestore.OperationQueryParameters) []tracestore.Operation); ok {
		r0 = rf(ctx, query)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]tracestore.Operation)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, tracestore.OperationQueryParameters) error); ok {
		r1 = rf(ctx, query)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetServices provides a mock function with given fields: ctx
func (_m *Reader) GetServices(ctx context.Context) ([]string, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetServices")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]string, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []string); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTrace provides a mock function with given fields: ctx, traceID
func (_m *Reader) GetTrace(ctx context.Context, traceID pcommon.TraceID) (ptrace.Traces, error) {
	ret := _m.Called(ctx, traceID)

	if len(ret) == 0 {
		panic("no return value specified for GetTrace")
	}

	var r0 ptrace.Traces
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, pcommon.TraceID) (ptrace.Traces, error)); ok {
		return rf(ctx, traceID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, pcommon.TraceID) ptrace.Traces); ok {
		r0 = rf(ctx, traceID)
	} else {
		r0 = ret.Get(0).(ptrace.Traces)
	}

	if rf, ok := ret.Get(1).(func(context.Context, pcommon.TraceID) error); ok {
		r1 = rf(ctx, traceID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewReader creates a new instance of Reader. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewReader(t interface {
	mock.TestingT
	Cleanup(func())
}) *Reader {
	mock := &Reader{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

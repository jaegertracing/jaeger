// Copyright (c) The Jaeger Authors.
// SPDX-License-Identifier: Apache-2.0
//
// Run 'make generate-mocks' to regenerate.

// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	ptrace "go.opentelemetry.io/collector/pdata/ptrace"
)

// Writer is an autogenerated mock type for the Writer type
type Writer struct {
	mock.Mock
}

type Writer_Expecter struct {
	mock *mock.Mock
}

func (_m *Writer) EXPECT() *Writer_Expecter {
	return &Writer_Expecter{mock: &_m.Mock}
}

// WriteTraces provides a mock function with given fields: ctx, td
func (_m *Writer) WriteTraces(ctx context.Context, td ptrace.Traces) error {
	ret := _m.Called(ctx, td)

	if len(ret) == 0 {
		panic("no return value specified for WriteTraces")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, ptrace.Traces) error); ok {
		r0 = rf(ctx, td)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Writer_WriteTraces_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WriteTraces'
type Writer_WriteTraces_Call struct {
	*mock.Call
}

// WriteTraces is a helper method to define mock.On call
//   - ctx context.Context
//   - td ptrace.Traces
func (_e *Writer_Expecter) WriteTraces(ctx interface{}, td interface{}) *Writer_WriteTraces_Call {
	return &Writer_WriteTraces_Call{Call: _e.mock.On("WriteTraces", ctx, td)}
}

func (_c *Writer_WriteTraces_Call) Run(run func(ctx context.Context, td ptrace.Traces)) *Writer_WriteTraces_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(ptrace.Traces))
	})
	return _c
}

func (_c *Writer_WriteTraces_Call) Return(_a0 error) *Writer_WriteTraces_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Writer_WriteTraces_Call) RunAndReturn(run func(context.Context, ptrace.Traces) error) *Writer_WriteTraces_Call {
	_c.Call.Return(run)
	return _c
}

// NewWriter creates a new instance of Writer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewWriter(t interface {
	mock.TestingT
	Cleanup(func())
}) *Writer {
	mock := &Writer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

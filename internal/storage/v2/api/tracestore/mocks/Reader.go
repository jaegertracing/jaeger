// Copyright (c) The Jaeger Authors.
// SPDX-License-Identifier: Apache-2.0
//
// Run 'make generate-mocks' to regenerate.

// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"
	iter "iter"

	mock "github.com/stretchr/testify/mock"

	ptrace "go.opentelemetry.io/collector/pdata/ptrace"

	tracestore "github.com/jaegertracing/jaeger/internal/storage/v2/api/tracestore"
)

// Reader is an autogenerated mock type for the Reader type
type Reader struct {
	mock.Mock
}

// FindTraceIDs provides a mock function with given fields: ctx, query
func (_m *Reader) FindTraceIDs(ctx context.Context, query tracestore.TraceQueryParams) iter.Seq2[[]tracestore.FoundTraceID, error] {
	ret := _m.Called(ctx, query)

	if len(ret) == 0 {
		panic("no return value specified for FindTraceIDs")
	}

	var r0 iter.Seq2[[]tracestore.FoundTraceID, error]
	if rf, ok := ret.Get(0).(func(context.Context, tracestore.TraceQueryParams) iter.Seq2[[]tracestore.FoundTraceID, error]); ok {
		r0 = rf(ctx, query)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(iter.Seq2[[]tracestore.FoundTraceID, error])
		}
	}

	return r0
}

// FindTraces provides a mock function with given fields: ctx, query
func (_m *Reader) FindTraces(ctx context.Context, query tracestore.TraceQueryParams) iter.Seq2[[]ptrace.Traces, error] {
	ret := _m.Called(ctx, query)

	if len(ret) == 0 {
		panic("no return value specified for FindTraces")
	}

	var r0 iter.Seq2[[]ptrace.Traces, error]
	if rf, ok := ret.Get(0).(func(context.Context, tracestore.TraceQueryParams) iter.Seq2[[]ptrace.Traces, error]); ok {
		r0 = rf(ctx, query)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(iter.Seq2[[]ptrace.Traces, error])
		}
	}

	return r0
}

// GetOperations provides a mock function with given fields: ctx, query
func (_m *Reader) GetOperations(ctx context.Context, query tracestore.OperationQueryParams) ([]tracestore.Operation, error) {
	ret := _m.Called(ctx, query)

	if len(ret) == 0 {
		panic("no return value specified for GetOperations")
	}

	var r0 []tracestore.Operation
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, tracestore.OperationQueryParams) ([]tracestore.Operation, error)); ok {
		return rf(ctx, query)
	}
	if rf, ok := ret.Get(0).(func(context.Context, tracestore.OperationQueryParams) []tracestore.Operation); ok {
		r0 = rf(ctx, query)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]tracestore.Operation)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, tracestore.OperationQueryParams) error); ok {
		r1 = rf(ctx, query)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetServices provides a mock function with given fields: ctx
func (_m *Reader) GetServices(ctx context.Context) ([]string, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetServices")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]string, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []string); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTraces provides a mock function with given fields: ctx, traceIDs
func (_m *Reader) GetTraces(ctx context.Context, traceIDs ...tracestore.GetTraceParams) iter.Seq2[[]ptrace.Traces, error] {
	_va := make([]interface{}, len(traceIDs))
	for _i := range traceIDs {
		_va[_i] = traceIDs[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetTraces")
	}

	var r0 iter.Seq2[[]ptrace.Traces, error]
	if rf, ok := ret.Get(0).(func(context.Context, ...tracestore.GetTraceParams) iter.Seq2[[]ptrace.Traces, error]); ok {
		r0 = rf(ctx, traceIDs...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(iter.Seq2[[]ptrace.Traces, error])
		}
	}

	return r0
}

// NewReader creates a new instance of Reader. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewReader(t interface {
	mock.TestingT
	Cleanup(func())
}) *Reader {
	mock := &Reader{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Copyright (c) The Jaeger Authors.
// SPDX-License-Identifier: Apache-2.0
//
// Run 'make generate-mocks' to regenerate.

// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	depstore "github.com/jaegertracing/jaeger/internal/storage/v2/api/depstore"
	mock "github.com/stretchr/testify/mock"
)

// Factory is an autogenerated mock type for the Factory type
type Factory struct {
	mock.Mock
}

type Factory_Expecter struct {
	mock *mock.Mock
}

func (_m *Factory) EXPECT() *Factory_Expecter {
	return &Factory_Expecter{mock: &_m.Mock}
}

// CreateDependencyReader provides a mock function with no fields
func (_m *Factory) CreateDependencyReader() (depstore.Reader, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for CreateDependencyReader")
	}

	var r0 depstore.Reader
	var r1 error
	if rf, ok := ret.Get(0).(func() (depstore.Reader, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() depstore.Reader); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(depstore.Reader)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Factory_CreateDependencyReader_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateDependencyReader'
type Factory_CreateDependencyReader_Call struct {
	*mock.Call
}

// CreateDependencyReader is a helper method to define mock.On call
func (_e *Factory_Expecter) CreateDependencyReader() *Factory_CreateDependencyReader_Call {
	return &Factory_CreateDependencyReader_Call{Call: _e.mock.On("CreateDependencyReader")}
}

func (_c *Factory_CreateDependencyReader_Call) Run(run func()) *Factory_CreateDependencyReader_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Factory_CreateDependencyReader_Call) Return(_a0 depstore.Reader, _a1 error) *Factory_CreateDependencyReader_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Factory_CreateDependencyReader_Call) RunAndReturn(run func() (depstore.Reader, error)) *Factory_CreateDependencyReader_Call {
	_c.Call.Return(run)
	return _c
}

// NewFactory creates a new instance of Factory. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewFactory(t interface {
	mock.TestingT
	Cleanup(func())
}) *Factory {
	mock := &Factory{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

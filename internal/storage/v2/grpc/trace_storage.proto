syntax = "proto3";

package jaeger.storage.v2;

import "gogoproto/gogo.proto";
import "google/protobuf/timestamp.proto";
import "opentelemetry/proto/trace/v1/trace.proto";

option go_package = "storage";

// GetTraceParams represents the query for a single trace from the storage backend.
message GetTraceParams {
  // trace_id is a 16 byte array containing the unique identifier for the trace to query.
  bytes trace_id = 1;

  // start_time is the start of the time interval to search for the trace_id.
  //
  // This field is optional.
  google.protobuf.Timestamp start_time = 2 [(gogoproto.stdtime) = true];

  // end_time is the end of the time interval to search for the trace_id.
  //
  // This field is optional.
  google.protobuf.Timestamp end_time = 3 [(gogoproto.stdtime) = true];
}

// GetTracesRequest represents a request to retrieve multiple traces.
message GetTracesRequest {
  repeated GetTraceParams query = 1;
}

// GetServicesRequest represents a request to get service names.
message GetServicesRequest {}

// GetServicesResponse represents the response for GetServicesRequest.
message GetServicesResponse {
  repeated string services = 1;
}

// GetOperationsRequest represents a request to get operation names.
message GetOperationsRequest {
  // service is the name of the service for which to get operation names.
  //
  // This field is required.
  string service = 1;

  // span_kind is the type of span which is used to distinguish between
  // spans generated in a particular context.
  //
  // This field is optional.
  opentelemetry.proto.trace.v1.Span.SpanKind span_kind = 2;
}

// Operation contains information about an operation for a given service.
message Operation {
  string name = 1;
  opentelemetry.proto.trace.v1.Span.SpanKind span_kind = 2;
}

// GetOperationsResponse represents the response for GetOperationsRequest.
message GetOperationsResponse {
  repeated Operation operations = 1;
}

service TraceReader {
  // GetTraces returns a stream that retrieves all traces with given IDs.
  //
  // Chunking requirements:
  // - A single TracesData chunk MUST NOT contain spans from multiple traces.
  // - Large traces MAY be split across multiple, *consecutive* TracesData chunks.
  // - Each returned TracesData object MUST NOT be empty.
  //
  // Edge cases:
  // - If no spans are found for any given trace ID, the ID is ignored.
  // - If none of the trace IDs are found in the storage, an empty response is returned.
  // - If an error is encountered, the stream returns the error and stops.
  rpc GetTraces(GetTracesRequest) returns (stream opentelemetry.proto.trace.v1.TracesData) {}

  // GetServices returns all service names known to the backend from traces
  // within its retention period.
  rpc GetServices(GetServicesRequest) returns (GetServicesResponse) {}

  // GetOperations returns all operation names for a given service
  // known to the backend from traces within its retention period.
  rpc GetOperations(GetOperationsRequest) returns (GetOperationsResponse) {}
}

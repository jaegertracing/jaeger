syntax = "proto3";

package jaeger.storage.v2;

import "gogoproto/gogo.proto";
import "google/protobuf/duration.proto";
import "google/protobuf/timestamp.proto";
import "opentelemetry/proto/common/v1/common.proto";
import "opentelemetry/proto/trace/v1/trace.proto";

option go_package = "storage";

// GetTraceParams represents the query for a single trace from the storage backend.
message GetTraceParams {
  // trace_id is a 16 byte array containing the unique identifier for the trace to query.
  bytes trace_id = 1;

  // start_time is the start of the time interval to search for the trace_id.
  //
  // This field is optional.
  google.protobuf.Timestamp start_time = 2 [(gogoproto.stdtime) = true];

  // end_time is the end of the time interval to search for the trace_id.
  //
  // This field is optional.
  google.protobuf.Timestamp end_time = 3 [(gogoproto.stdtime) = true];
}

// GetTracesRequest represents a request to retrieve multiple traces.
message GetTracesRequest {
  repeated GetTraceParams query = 1;
}

// GetServicesRequest represents a request to get service names.
message GetServicesRequest {}

// GetServicesResponse represents the response for GetServicesRequest.
message GetServicesResponse {
  repeated string services = 1;
}

// GetOperationsRequest represents a request to get operation names.
message GetOperationsRequest {
  // service is the name of the service for which to get operation names.
  //
  // This field is required.
  string service = 1;

  // span_kind is the type of span which is used to distinguish between
  // spans generated in a particular context.
  //
  // This field is optional.
  opentelemetry.proto.trace.v1.Span.SpanKind span_kind = 2;
}

// Operation contains information about an operation for a given service.
message Operation {
  string name = 1;
  opentelemetry.proto.trace.v1.Span.SpanKind span_kind = 2;
}

// GetOperationsResponse represents the response for GetOperationsRequest.
message GetOperationsResponse {
  repeated Operation operations = 1;
}

// TraceQueryParameters contains query paramters to find traces. For a detailed
// definition of each field in this message, refer to `TraceQueryParameters` in `jaeger.api_v3`
// (https://github.com/jaegertracing/jaeger-idl/blob/main/proto/api_v3/query_service.proto).
message TraceQueryParameters {
  string service_name = 1;
  string operation_name = 2;
  repeated opentelemetry.proto.common.v1.KeyValue attributes = 3;
  google.protobuf.Timestamp start_time_min = 4 [
    (gogoproto.stdtime) = true,
    (gogoproto.nullable) = false
  ];
  google.protobuf.Timestamp start_time_max = 5 [
    (gogoproto.stdtime) = true,
    (gogoproto.nullable) = false
  ];
  google.protobuf.Duration duration_min = 6 [
    (gogoproto.stdduration) = true,
    (gogoproto.nullable) = false
  ];
  google.protobuf.Duration duration_max = 7 [
    (gogoproto.stdduration) = true,
    (gogoproto.nullable) = false
  ];
  int32 search_depth = 8;
}

// FindTracesRequest represents a request to find traces.
// It can be used to retrieve the traces (FindTraces) or simply
// the trace IDs (FindTraceIDs).
message FindTracesRequest {
  TraceQueryParameters query = 1;
}

// FindTraceIDsResponse represents the response for FindTracesRequest.
message FindTraceIDsResponse {
  repeated bytes trace_ids = 1;
}

// TraceReader is a service that allows reading traces from storage.
// Note that if you implement this service, you should also implement
// OTEL's TraceService in package opentelemetry.proto.collector.trace.v1
// to allow pushing traces to the storage backend
// (https://github.com/open-telemetry/opentelemetry-proto/blob/main/opentelemetry/proto/collector/trace/v1/trace_service.proto)
service TraceReader {
  // GetTraces returns a stream that retrieves all traces with given IDs.
  //
  // Chunking requirements:
  // - A single TracesData chunk MUST NOT contain spans from multiple traces.
  // - Large traces MAY be split across multiple, *consecutive* TracesData chunks.
  // - Each returned TracesData object MUST NOT be empty.
  //
  // Edge cases:
  // - If no spans are found for any given trace ID, the ID is ignored.
  // - If none of the trace IDs are found in the storage, an empty response is returned.
  rpc GetTraces(GetTracesRequest) returns (stream opentelemetry.proto.trace.v1.TracesData) {}

  // GetServices returns all service names known to the backend from traces
  // within its retention period.
  rpc GetServices(GetServicesRequest) returns (GetServicesResponse) {}

  // GetOperations returns all operation names for a given service
  // known to the backend from traces within its retention period.
  rpc GetOperations(GetOperationsRequest) returns (GetOperationsResponse) {}

  // FindTraces returns a stream that retrieves traces matching query parameters.
  //
  // The chunking rules are the same as for GetTraces.
  //
  // If no matching traces are found, an empty stream is returned.
  rpc FindTraces(FindTracesRequest) returns (stream opentelemetry.proto.trace.v1.TracesData) {}

  // FindTraceIDs returns a stream that retrieves IDs of traces matching query parameters.
  //
  // If no matching traces are found, an empty stream is returned.
  //
  // This call behaves identically to FindTraces, except that it returns only the list
  // of matching trace IDs. This is useful in some contexts, such as batch jobs, where a
  // large list of trace IDs may be queried first and then the full traces are loaded
  // in batches.
  rpc FindTraceIDs(FindTracesRequest) returns (FindTraceIDsResponse) {}
}

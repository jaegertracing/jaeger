// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify
// Copyright (c) The Jaeger Authors.
// SPDX-License-Identifier: Apache-2.0
//
// Run 'make generate-mocks' to regenerate.

package mocks

import (
	"context"

	"github.com/jaegertracing/jaeger/internal/storage/v2/clickhouse"
	mock "github.com/stretchr/testify/mock"
)

// NewConn creates a new instance of Conn. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewConn(t interface {
	mock.TestingT
	Cleanup(func())
}) *Conn {
	mock := &Conn{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Conn is an autogenerated mock type for the Conn type
type Conn struct {
	mock.Mock
}

type Conn_Expecter struct {
	mock *mock.Mock
}

func (_m *Conn) EXPECT() *Conn_Expecter {
	return &Conn_Expecter{mock: &_m.Mock}
}

// PrepareBatch provides a mock function for the type Conn
func (_mock *Conn) PrepareBatch(ctx context.Context, query string) (clickhouse.Batch, error) {
	ret := _mock.Called(ctx, query)

	if len(ret) == 0 {
		panic("no return value specified for PrepareBatch")
	}

	var r0 clickhouse.Batch
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (clickhouse.Batch, error)); ok {
		return returnFunc(ctx, query)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) clickhouse.Batch); ok {
		r0 = returnFunc(ctx, query)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(clickhouse.Batch)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, query)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Conn_PrepareBatch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PrepareBatch'
type Conn_PrepareBatch_Call struct {
	*mock.Call
}

// PrepareBatch is a helper method to define mock.On call
//   - ctx
//   - query
func (_e *Conn_Expecter) PrepareBatch(ctx interface{}, query interface{}) *Conn_PrepareBatch_Call {
	return &Conn_PrepareBatch_Call{Call: _e.mock.On("PrepareBatch", ctx, query)}
}

func (_c *Conn_PrepareBatch_Call) Run(run func(ctx context.Context, query string)) *Conn_PrepareBatch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *Conn_PrepareBatch_Call) Return(batch clickhouse.Batch, err error) *Conn_PrepareBatch_Call {
	_c.Call.Return(batch, err)
	return _c
}

func (_c *Conn_PrepareBatch_Call) RunAndReturn(run func(ctx context.Context, query string) (clickhouse.Batch, error)) *Conn_PrepareBatch_Call {
	_c.Call.Return(run)
	return _c
}

// NewBatch creates a new instance of Batch. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBatch(t interface {
	mock.TestingT
	Cleanup(func())
}) *Batch {
	mock := &Batch{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Batch is an autogenerated mock type for the Batch type
type Batch struct {
	mock.Mock
}

type Batch_Expecter struct {
	mock *mock.Mock
}

func (_m *Batch) EXPECT() *Batch_Expecter {
	return &Batch_Expecter{mock: &_m.Mock}
}

// Append provides a mock function for the type Batch
func (_mock *Batch) Append(v ...any) error {
	var tmpRet mock.Arguments
	if len(v) > 0 {
		tmpRet = _mock.Called(v)
	} else {
		tmpRet = _mock.Called()
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for Append")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(...any) error); ok {
		r0 = returnFunc(v...)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Batch_Append_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Append'
type Batch_Append_Call struct {
	*mock.Call
}

// Append is a helper method to define mock.On call
//   - v
func (_e *Batch_Expecter) Append(v ...interface{}) *Batch_Append_Call {
	return &Batch_Append_Call{Call: _e.mock.On("Append",
		append([]interface{}{}, v...)...)}
}

func (_c *Batch_Append_Call) Run(run func(v ...any)) *Batch_Append_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]any, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(any)
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *Batch_Append_Call) Return(err error) *Batch_Append_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Batch_Append_Call) RunAndReturn(run func(v ...any) error) *Batch_Append_Call {
	_c.Call.Return(run)
	return _c
}

// Send provides a mock function for the type Batch
func (_mock *Batch) Send() error {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Send")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func() error); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Batch_Send_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Send'
type Batch_Send_Call struct {
	*mock.Call
}

// Send is a helper method to define mock.On call
func (_e *Batch_Expecter) Send() *Batch_Send_Call {
	return &Batch_Send_Call{Call: _e.mock.On("Send")}
}

func (_c *Batch_Send_Call) Run(run func()) *Batch_Send_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Batch_Send_Call) Return(err error) *Batch_Send_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Batch_Send_Call) RunAndReturn(run func() error) *Batch_Send_Call {
	_c.Call.Return(run)
	return _c
}

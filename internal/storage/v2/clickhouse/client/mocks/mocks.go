// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify
// Copyright (c) The Jaeger Authors.
// SPDX-License-Identifier: Apache-2.0
//
// Run 'make generate-mocks' to regenerate.

package mocks

import (
	"context"

	"github.com/jaegertracing/jaeger/internal/storage/v2/clickhouse/client"
	mock "github.com/stretchr/testify/mock"
)

// NewConn creates a new instance of Conn. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewConn(t interface {
	mock.TestingT
	Cleanup(func())
}) *Conn {
	mock := &Conn{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Conn is an autogenerated mock type for the Conn type
type Conn struct {
	mock.Mock
}

type Conn_Expecter struct {
	mock *mock.Mock
}

func (_m *Conn) EXPECT() *Conn_Expecter {
	return &Conn_Expecter{mock: &_m.Mock}
}

// Close provides a mock function for the type Conn
func (_mock *Conn) Close() error {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func() error); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Conn_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type Conn_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *Conn_Expecter) Close() *Conn_Close_Call {
	return &Conn_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *Conn_Close_Call) Run(run func()) *Conn_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Conn_Close_Call) Return(err error) *Conn_Close_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Conn_Close_Call) RunAndReturn(run func() error) *Conn_Close_Call {
	_c.Call.Return(run)
	return _c
}

// PrepareBatch provides a mock function for the type Conn
func (_mock *Conn) PrepareBatch(ctx context.Context, query string) (client.Batch, error) {
	ret := _mock.Called(ctx, query)

	if len(ret) == 0 {
		panic("no return value specified for PrepareBatch")
	}

	var r0 client.Batch
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (client.Batch, error)); ok {
		return returnFunc(ctx, query)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) client.Batch); ok {
		r0 = returnFunc(ctx, query)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(client.Batch)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, query)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Conn_PrepareBatch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PrepareBatch'
type Conn_PrepareBatch_Call struct {
	*mock.Call
}

// PrepareBatch is a helper method to define mock.On call
//   - ctx
//   - query
func (_e *Conn_Expecter) PrepareBatch(ctx interface{}, query interface{}) *Conn_PrepareBatch_Call {
	return &Conn_PrepareBatch_Call{Call: _e.mock.On("PrepareBatch", ctx, query)}
}

func (_c *Conn_PrepareBatch_Call) Run(run func(ctx context.Context, query string)) *Conn_PrepareBatch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *Conn_PrepareBatch_Call) Return(batch client.Batch, err error) *Conn_PrepareBatch_Call {
	_c.Call.Return(batch, err)
	return _c
}

func (_c *Conn_PrepareBatch_Call) RunAndReturn(run func(ctx context.Context, query string) (client.Batch, error)) *Conn_PrepareBatch_Call {
	_c.Call.Return(run)
	return _c
}

// Query provides a mock function for the type Conn
func (_mock *Conn) Query(ctx context.Context, query string, args ...any) (client.Rows, error) {
	var tmpRet mock.Arguments
	if len(args) > 0 {
		tmpRet = _mock.Called(ctx, query, args)
	} else {
		tmpRet = _mock.Called(ctx, query)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for Query")
	}

	var r0 client.Rows
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...any) (client.Rows, error)); ok {
		return returnFunc(ctx, query, args...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...any) client.Rows); ok {
		r0 = returnFunc(ctx, query, args...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(client.Rows)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, ...any) error); ok {
		r1 = returnFunc(ctx, query, args...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Conn_Query_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Query'
type Conn_Query_Call struct {
	*mock.Call
}

// Query is a helper method to define mock.On call
//   - ctx
//   - query
//   - args
func (_e *Conn_Expecter) Query(ctx interface{}, query interface{}, args ...interface{}) *Conn_Query_Call {
	return &Conn_Query_Call{Call: _e.mock.On("Query",
		append([]interface{}{ctx, query}, args...)...)}
}

func (_c *Conn_Query_Call) Run(run func(ctx context.Context, query string, args ...any)) *Conn_Query_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]any, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(any)
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *Conn_Query_Call) Return(rows client.Rows, err error) *Conn_Query_Call {
	_c.Call.Return(rows, err)
	return _c
}

func (_c *Conn_Query_Call) RunAndReturn(run func(ctx context.Context, query string, args ...any) (client.Rows, error)) *Conn_Query_Call {
	_c.Call.Return(run)
	return _c
}

// NewRows creates a new instance of Rows. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRows(t interface {
	mock.TestingT
	Cleanup(func())
}) *Rows {
	mock := &Rows{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Rows is an autogenerated mock type for the Rows type
type Rows struct {
	mock.Mock
}

type Rows_Expecter struct {
	mock *mock.Mock
}

func (_m *Rows) EXPECT() *Rows_Expecter {
	return &Rows_Expecter{mock: &_m.Mock}
}

// Err provides a mock function for the type Rows
func (_mock *Rows) Err() error {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Err")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func() error); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Rows_Err_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Err'
type Rows_Err_Call struct {
	*mock.Call
}

// Err is a helper method to define mock.On call
func (_e *Rows_Expecter) Err() *Rows_Err_Call {
	return &Rows_Err_Call{Call: _e.mock.On("Err")}
}

func (_c *Rows_Err_Call) Run(run func()) *Rows_Err_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Rows_Err_Call) Return(err error) *Rows_Err_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Rows_Err_Call) RunAndReturn(run func() error) *Rows_Err_Call {
	_c.Call.Return(run)
	return _c
}

// Next provides a mock function for the type Rows
func (_mock *Rows) Next() bool {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Next")
	}

	var r0 bool
	if returnFunc, ok := ret.Get(0).(func() bool); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(bool)
	}
	return r0
}

// Rows_Next_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Next'
type Rows_Next_Call struct {
	*mock.Call
}

// Next is a helper method to define mock.On call
func (_e *Rows_Expecter) Next() *Rows_Next_Call {
	return &Rows_Next_Call{Call: _e.mock.On("Next")}
}

func (_c *Rows_Next_Call) Run(run func()) *Rows_Next_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Rows_Next_Call) Return(b bool) *Rows_Next_Call {
	_c.Call.Return(b)
	return _c
}

func (_c *Rows_Next_Call) RunAndReturn(run func() bool) *Rows_Next_Call {
	_c.Call.Return(run)
	return _c
}

// Scan provides a mock function for the type Rows
func (_mock *Rows) Scan(dest ...any) error {
	var tmpRet mock.Arguments
	if len(dest) > 0 {
		tmpRet = _mock.Called(dest)
	} else {
		tmpRet = _mock.Called()
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for Scan")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(...any) error); ok {
		r0 = returnFunc(dest...)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Rows_Scan_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Scan'
type Rows_Scan_Call struct {
	*mock.Call
}

// Scan is a helper method to define mock.On call
//   - dest
func (_e *Rows_Expecter) Scan(dest ...interface{}) *Rows_Scan_Call {
	return &Rows_Scan_Call{Call: _e.mock.On("Scan",
		append([]interface{}{}, dest...)...)}
}

func (_c *Rows_Scan_Call) Run(run func(dest ...any)) *Rows_Scan_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]any, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(any)
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *Rows_Scan_Call) Return(err error) *Rows_Scan_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Rows_Scan_Call) RunAndReturn(run func(dest ...any) error) *Rows_Scan_Call {
	_c.Call.Return(run)
	return _c
}

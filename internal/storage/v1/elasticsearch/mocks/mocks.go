// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify
// Copyright (c) The Jaeger Authors.
// SPDX-License-Identifier: Apache-2.0
//
// Run 'make generate-mocks' to regenerate.

package mocks

import (
	"context"
	"flag"

	"github.com/jaegertracing/jaeger/internal/metrics"
	"github.com/jaegertracing/jaeger/internal/storage/elasticsearch/config"
	"github.com/jaegertracing/jaeger/internal/storage/v1/api/samplingstore"
	"github.com/jaegertracing/jaeger/internal/storage/v1/elasticsearch/spanstore"
	"github.com/jaegertracing/jaeger/internal/storage/v2/elasticsearch/depstore"
	"github.com/spf13/viper"
	mock "github.com/stretchr/testify/mock"
	"go.uber.org/zap"
)

// NewCoreFactory creates a new instance of CoreFactory. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCoreFactory(t interface {
	mock.TestingT
	Cleanup(func())
}) *CoreFactory {
	mock := &CoreFactory{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// CoreFactory is an autogenerated mock type for the CoreFactory type
type CoreFactory struct {
	mock.Mock
}

type CoreFactory_Expecter struct {
	mock *mock.Mock
}

func (_m *CoreFactory) EXPECT() *CoreFactory_Expecter {
	return &CoreFactory_Expecter{mock: &_m.Mock}
}

// AddFlags provides a mock function for the type CoreFactory
func (_mock *CoreFactory) AddFlags(flagSet *flag.FlagSet) {
	_mock.Called(flagSet)
	return
}

// CoreFactory_AddFlags_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddFlags'
type CoreFactory_AddFlags_Call struct {
	*mock.Call
}

// AddFlags is a helper method to define mock.On call
//   - flagSet
func (_e *CoreFactory_Expecter) AddFlags(flagSet interface{}) *CoreFactory_AddFlags_Call {
	return &CoreFactory_AddFlags_Call{Call: _e.mock.On("AddFlags", flagSet)}
}

func (_c *CoreFactory_AddFlags_Call) Run(run func(flagSet *flag.FlagSet)) *CoreFactory_AddFlags_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*flag.FlagSet))
	})
	return _c
}

func (_c *CoreFactory_AddFlags_Call) Return() *CoreFactory_AddFlags_Call {
	_c.Call.Return()
	return _c
}

func (_c *CoreFactory_AddFlags_Call) RunAndReturn(run func(flagSet *flag.FlagSet)) *CoreFactory_AddFlags_Call {
	_c.Run(run)
	return _c
}

// Close provides a mock function for the type CoreFactory
func (_mock *CoreFactory) Close() error {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func() error); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// CoreFactory_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type CoreFactory_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *CoreFactory_Expecter) Close() *CoreFactory_Close_Call {
	return &CoreFactory_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *CoreFactory_Close_Call) Run(run func()) *CoreFactory_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *CoreFactory_Close_Call) Return(err error) *CoreFactory_Close_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *CoreFactory_Close_Call) RunAndReturn(run func() error) *CoreFactory_Close_Call {
	_c.Call.Return(run)
	return _c
}

// CreateSamplingStore provides a mock function for the type CoreFactory
func (_mock *CoreFactory) CreateSamplingStore(n int) (samplingstore.Store, error) {
	ret := _mock.Called(n)

	if len(ret) == 0 {
		panic("no return value specified for CreateSamplingStore")
	}

	var r0 samplingstore.Store
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(int) (samplingstore.Store, error)); ok {
		return returnFunc(n)
	}
	if returnFunc, ok := ret.Get(0).(func(int) samplingstore.Store); ok {
		r0 = returnFunc(n)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(samplingstore.Store)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(int) error); ok {
		r1 = returnFunc(n)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// CoreFactory_CreateSamplingStore_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateSamplingStore'
type CoreFactory_CreateSamplingStore_Call struct {
	*mock.Call
}

// CreateSamplingStore is a helper method to define mock.On call
//   - n
func (_e *CoreFactory_Expecter) CreateSamplingStore(n interface{}) *CoreFactory_CreateSamplingStore_Call {
	return &CoreFactory_CreateSamplingStore_Call{Call: _e.mock.On("CreateSamplingStore", n)}
}

func (_c *CoreFactory_CreateSamplingStore_Call) Run(run func(n int)) *CoreFactory_CreateSamplingStore_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *CoreFactory_CreateSamplingStore_Call) Return(store samplingstore.Store, err error) *CoreFactory_CreateSamplingStore_Call {
	_c.Call.Return(store, err)
	return _c
}

func (_c *CoreFactory_CreateSamplingStore_Call) RunAndReturn(run func(n int) (samplingstore.Store, error)) *CoreFactory_CreateSamplingStore_Call {
	_c.Call.Return(run)
	return _c
}

// GetConfig provides a mock function for the type CoreFactory
func (_mock *CoreFactory) GetConfig() *config.Configuration {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetConfig")
	}

	var r0 *config.Configuration
	if returnFunc, ok := ret.Get(0).(func() *config.Configuration); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*config.Configuration)
		}
	}
	return r0
}

// CoreFactory_GetConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetConfig'
type CoreFactory_GetConfig_Call struct {
	*mock.Call
}

// GetConfig is a helper method to define mock.On call
func (_e *CoreFactory_Expecter) GetConfig() *CoreFactory_GetConfig_Call {
	return &CoreFactory_GetConfig_Call{Call: _e.mock.On("GetConfig")}
}

func (_c *CoreFactory_GetConfig_Call) Run(run func()) *CoreFactory_GetConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *CoreFactory_GetConfig_Call) Return(configuration *config.Configuration) *CoreFactory_GetConfig_Call {
	_c.Call.Return(configuration)
	return _c
}

func (_c *CoreFactory_GetConfig_Call) RunAndReturn(run func() *config.Configuration) *CoreFactory_GetConfig_Call {
	_c.Call.Return(run)
	return _c
}

// GetDependencyStoreParams provides a mock function for the type CoreFactory
func (_mock *CoreFactory) GetDependencyStoreParams() depstore.Params {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetDependencyStoreParams")
	}

	var r0 depstore.Params
	if returnFunc, ok := ret.Get(0).(func() depstore.Params); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(depstore.Params)
	}
	return r0
}

// CoreFactory_GetDependencyStoreParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDependencyStoreParams'
type CoreFactory_GetDependencyStoreParams_Call struct {
	*mock.Call
}

// GetDependencyStoreParams is a helper method to define mock.On call
func (_e *CoreFactory_Expecter) GetDependencyStoreParams() *CoreFactory_GetDependencyStoreParams_Call {
	return &CoreFactory_GetDependencyStoreParams_Call{Call: _e.mock.On("GetDependencyStoreParams")}
}

func (_c *CoreFactory_GetDependencyStoreParams_Call) Run(run func()) *CoreFactory_GetDependencyStoreParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *CoreFactory_GetDependencyStoreParams_Call) Return(params depstore.Params) *CoreFactory_GetDependencyStoreParams_Call {
	_c.Call.Return(params)
	return _c
}

func (_c *CoreFactory_GetDependencyStoreParams_Call) RunAndReturn(run func() depstore.Params) *CoreFactory_GetDependencyStoreParams_Call {
	_c.Call.Return(run)
	return _c
}

// GetMetricsFactory provides a mock function for the type CoreFactory
func (_mock *CoreFactory) GetMetricsFactory() metrics.Factory {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetMetricsFactory")
	}

	var r0 metrics.Factory
	if returnFunc, ok := ret.Get(0).(func() metrics.Factory); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(metrics.Factory)
		}
	}
	return r0
}

// CoreFactory_GetMetricsFactory_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMetricsFactory'
type CoreFactory_GetMetricsFactory_Call struct {
	*mock.Call
}

// GetMetricsFactory is a helper method to define mock.On call
func (_e *CoreFactory_Expecter) GetMetricsFactory() *CoreFactory_GetMetricsFactory_Call {
	return &CoreFactory_GetMetricsFactory_Call{Call: _e.mock.On("GetMetricsFactory")}
}

func (_c *CoreFactory_GetMetricsFactory_Call) Run(run func()) *CoreFactory_GetMetricsFactory_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *CoreFactory_GetMetricsFactory_Call) Return(factory metrics.Factory) *CoreFactory_GetMetricsFactory_Call {
	_c.Call.Return(factory)
	return _c
}

func (_c *CoreFactory_GetMetricsFactory_Call) RunAndReturn(run func() metrics.Factory) *CoreFactory_GetMetricsFactory_Call {
	_c.Call.Return(run)
	return _c
}

// GetSpanReaderParams provides a mock function for the type CoreFactory
func (_mock *CoreFactory) GetSpanReaderParams() (spanstore.SpanReaderParams, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetSpanReaderParams")
	}

	var r0 spanstore.SpanReaderParams
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() (spanstore.SpanReaderParams, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() spanstore.SpanReaderParams); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(spanstore.SpanReaderParams)
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// CoreFactory_GetSpanReaderParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSpanReaderParams'
type CoreFactory_GetSpanReaderParams_Call struct {
	*mock.Call
}

// GetSpanReaderParams is a helper method to define mock.On call
func (_e *CoreFactory_Expecter) GetSpanReaderParams() *CoreFactory_GetSpanReaderParams_Call {
	return &CoreFactory_GetSpanReaderParams_Call{Call: _e.mock.On("GetSpanReaderParams")}
}

func (_c *CoreFactory_GetSpanReaderParams_Call) Run(run func()) *CoreFactory_GetSpanReaderParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *CoreFactory_GetSpanReaderParams_Call) Return(spanReaderParams spanstore.SpanReaderParams, err error) *CoreFactory_GetSpanReaderParams_Call {
	_c.Call.Return(spanReaderParams, err)
	return _c
}

func (_c *CoreFactory_GetSpanReaderParams_Call) RunAndReturn(run func() (spanstore.SpanReaderParams, error)) *CoreFactory_GetSpanReaderParams_Call {
	_c.Call.Return(run)
	return _c
}

// GetSpanWriterParams provides a mock function for the type CoreFactory
func (_mock *CoreFactory) GetSpanWriterParams() (spanstore.SpanWriterParams, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetSpanWriterParams")
	}

	var r0 spanstore.SpanWriterParams
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() (spanstore.SpanWriterParams, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() spanstore.SpanWriterParams); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(spanstore.SpanWriterParams)
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// CoreFactory_GetSpanWriterParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSpanWriterParams'
type CoreFactory_GetSpanWriterParams_Call struct {
	*mock.Call
}

// GetSpanWriterParams is a helper method to define mock.On call
func (_e *CoreFactory_Expecter) GetSpanWriterParams() *CoreFactory_GetSpanWriterParams_Call {
	return &CoreFactory_GetSpanWriterParams_Call{Call: _e.mock.On("GetSpanWriterParams")}
}

func (_c *CoreFactory_GetSpanWriterParams_Call) Run(run func()) *CoreFactory_GetSpanWriterParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *CoreFactory_GetSpanWriterParams_Call) Return(spanWriterParams spanstore.SpanWriterParams, err error) *CoreFactory_GetSpanWriterParams_Call {
	_c.Call.Return(spanWriterParams, err)
	return _c
}

func (_c *CoreFactory_GetSpanWriterParams_Call) RunAndReturn(run func() (spanstore.SpanWriterParams, error)) *CoreFactory_GetSpanWriterParams_Call {
	_c.Call.Return(run)
	return _c
}

// InitFromViper provides a mock function for the type CoreFactory
func (_mock *CoreFactory) InitFromViper(v *viper.Viper) {
	_mock.Called(v)
	return
}

// CoreFactory_InitFromViper_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InitFromViper'
type CoreFactory_InitFromViper_Call struct {
	*mock.Call
}

// InitFromViper is a helper method to define mock.On call
//   - v
func (_e *CoreFactory_Expecter) InitFromViper(v interface{}) *CoreFactory_InitFromViper_Call {
	return &CoreFactory_InitFromViper_Call{Call: _e.mock.On("InitFromViper", v)}
}

func (_c *CoreFactory_InitFromViper_Call) Run(run func(v *viper.Viper)) *CoreFactory_InitFromViper_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*viper.Viper))
	})
	return _c
}

func (_c *CoreFactory_InitFromViper_Call) Return() *CoreFactory_InitFromViper_Call {
	_c.Call.Return()
	return _c
}

func (_c *CoreFactory_InitFromViper_Call) RunAndReturn(run func(v *viper.Viper)) *CoreFactory_InitFromViper_Call {
	_c.Run(run)
	return _c
}

// Initialize provides a mock function for the type CoreFactory
func (_mock *CoreFactory) Initialize(metricsFactory metrics.Factory, logger *zap.Logger) error {
	ret := _mock.Called(metricsFactory, logger)

	if len(ret) == 0 {
		panic("no return value specified for Initialize")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(metrics.Factory, *zap.Logger) error); ok {
		r0 = returnFunc(metricsFactory, logger)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// CoreFactory_Initialize_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Initialize'
type CoreFactory_Initialize_Call struct {
	*mock.Call
}

// Initialize is a helper method to define mock.On call
//   - metricsFactory
//   - logger
func (_e *CoreFactory_Expecter) Initialize(metricsFactory interface{}, logger interface{}) *CoreFactory_Initialize_Call {
	return &CoreFactory_Initialize_Call{Call: _e.mock.On("Initialize", metricsFactory, logger)}
}

func (_c *CoreFactory_Initialize_Call) Run(run func(metricsFactory metrics.Factory, logger *zap.Logger)) *CoreFactory_Initialize_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(metrics.Factory), args[1].(*zap.Logger))
	})
	return _c
}

func (_c *CoreFactory_Initialize_Call) Return(err error) *CoreFactory_Initialize_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *CoreFactory_Initialize_Call) RunAndReturn(run func(metricsFactory metrics.Factory, logger *zap.Logger) error) *CoreFactory_Initialize_Call {
	_c.Call.Return(run)
	return _c
}

// IsArchiveCapable provides a mock function for the type CoreFactory
func (_mock *CoreFactory) IsArchiveCapable() bool {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for IsArchiveCapable")
	}

	var r0 bool
	if returnFunc, ok := ret.Get(0).(func() bool); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(bool)
	}
	return r0
}

// CoreFactory_IsArchiveCapable_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsArchiveCapable'
type CoreFactory_IsArchiveCapable_Call struct {
	*mock.Call
}

// IsArchiveCapable is a helper method to define mock.On call
func (_e *CoreFactory_Expecter) IsArchiveCapable() *CoreFactory_IsArchiveCapable_Call {
	return &CoreFactory_IsArchiveCapable_Call{Call: _e.mock.On("IsArchiveCapable")}
}

func (_c *CoreFactory_IsArchiveCapable_Call) Run(run func()) *CoreFactory_IsArchiveCapable_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *CoreFactory_IsArchiveCapable_Call) Return(b bool) *CoreFactory_IsArchiveCapable_Call {
	_c.Call.Return(b)
	return _c
}

func (_c *CoreFactory_IsArchiveCapable_Call) RunAndReturn(run func() bool) *CoreFactory_IsArchiveCapable_Call {
	_c.Call.Return(run)
	return _c
}

// Purge provides a mock function for the type CoreFactory
func (_mock *CoreFactory) Purge(ctx context.Context) error {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Purge")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// CoreFactory_Purge_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Purge'
type CoreFactory_Purge_Call struct {
	*mock.Call
}

// Purge is a helper method to define mock.On call
//   - ctx
func (_e *CoreFactory_Expecter) Purge(ctx interface{}) *CoreFactory_Purge_Call {
	return &CoreFactory_Purge_Call{Call: _e.mock.On("Purge", ctx)}
}

func (_c *CoreFactory_Purge_Call) Run(run func(ctx context.Context)) *CoreFactory_Purge_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *CoreFactory_Purge_Call) Return(err error) *CoreFactory_Purge_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *CoreFactory_Purge_Call) RunAndReturn(run func(ctx context.Context) error) *CoreFactory_Purge_Call {
	_c.Call.Return(run)
	return _c
}

// Copyright (c) The Jaeger Authors.
// SPDX-License-Identifier: Apache-2.0
//
// Run 'make generate-mocks' to regenerate.

// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	dbmodel "github.com/jaegertracing/jaeger/internal/storage/elasticsearch/dbmodel"
	mock "github.com/stretchr/testify/mock"
)

// CoreSpanReader is an autogenerated mock type for the CoreSpanReader type
type CoreSpanReader struct {
	mock.Mock
}

type CoreSpanReader_Expecter struct {
	mock *mock.Mock
}

func (_m *CoreSpanReader) EXPECT() *CoreSpanReader_Expecter {
	return &CoreSpanReader_Expecter{mock: &_m.Mock}
}

// FindTraceIDs provides a mock function with given fields: ctx, traceQuery
func (_m *CoreSpanReader) FindTraceIDs(ctx context.Context, traceQuery dbmodel.TraceQueryParameters) ([]dbmodel.TraceID, error) {
	ret := _m.Called(ctx, traceQuery)

	if len(ret) == 0 {
		panic("no return value specified for FindTraceIDs")
	}

	var r0 []dbmodel.TraceID
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, dbmodel.TraceQueryParameters) ([]dbmodel.TraceID, error)); ok {
		return rf(ctx, traceQuery)
	}
	if rf, ok := ret.Get(0).(func(context.Context, dbmodel.TraceQueryParameters) []dbmodel.TraceID); ok {
		r0 = rf(ctx, traceQuery)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]dbmodel.TraceID)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, dbmodel.TraceQueryParameters) error); ok {
		r1 = rf(ctx, traceQuery)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CoreSpanReader_FindTraceIDs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindTraceIDs'
type CoreSpanReader_FindTraceIDs_Call struct {
	*mock.Call
}

// FindTraceIDs is a helper method to define mock.On call
//   - ctx context.Context
//   - traceQuery dbmodel.TraceQueryParameters
func (_e *CoreSpanReader_Expecter) FindTraceIDs(ctx interface{}, traceQuery interface{}) *CoreSpanReader_FindTraceIDs_Call {
	return &CoreSpanReader_FindTraceIDs_Call{Call: _e.mock.On("FindTraceIDs", ctx, traceQuery)}
}

func (_c *CoreSpanReader_FindTraceIDs_Call) Run(run func(ctx context.Context, traceQuery dbmodel.TraceQueryParameters)) *CoreSpanReader_FindTraceIDs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(dbmodel.TraceQueryParameters))
	})
	return _c
}

func (_c *CoreSpanReader_FindTraceIDs_Call) Return(_a0 []dbmodel.TraceID, _a1 error) *CoreSpanReader_FindTraceIDs_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CoreSpanReader_FindTraceIDs_Call) RunAndReturn(run func(context.Context, dbmodel.TraceQueryParameters) ([]dbmodel.TraceID, error)) *CoreSpanReader_FindTraceIDs_Call {
	_c.Call.Return(run)
	return _c
}

// FindTraces provides a mock function with given fields: ctx, traceQuery
func (_m *CoreSpanReader) FindTraces(ctx context.Context, traceQuery dbmodel.TraceQueryParameters) ([]dbmodel.Trace, error) {
	ret := _m.Called(ctx, traceQuery)

	if len(ret) == 0 {
		panic("no return value specified for FindTraces")
	}

	var r0 []dbmodel.Trace
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, dbmodel.TraceQueryParameters) ([]dbmodel.Trace, error)); ok {
		return rf(ctx, traceQuery)
	}
	if rf, ok := ret.Get(0).(func(context.Context, dbmodel.TraceQueryParameters) []dbmodel.Trace); ok {
		r0 = rf(ctx, traceQuery)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]dbmodel.Trace)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, dbmodel.TraceQueryParameters) error); ok {
		r1 = rf(ctx, traceQuery)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CoreSpanReader_FindTraces_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindTraces'
type CoreSpanReader_FindTraces_Call struct {
	*mock.Call
}

// FindTraces is a helper method to define mock.On call
//   - ctx context.Context
//   - traceQuery dbmodel.TraceQueryParameters
func (_e *CoreSpanReader_Expecter) FindTraces(ctx interface{}, traceQuery interface{}) *CoreSpanReader_FindTraces_Call {
	return &CoreSpanReader_FindTraces_Call{Call: _e.mock.On("FindTraces", ctx, traceQuery)}
}

func (_c *CoreSpanReader_FindTraces_Call) Run(run func(ctx context.Context, traceQuery dbmodel.TraceQueryParameters)) *CoreSpanReader_FindTraces_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(dbmodel.TraceQueryParameters))
	})
	return _c
}

func (_c *CoreSpanReader_FindTraces_Call) Return(_a0 []dbmodel.Trace, _a1 error) *CoreSpanReader_FindTraces_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CoreSpanReader_FindTraces_Call) RunAndReturn(run func(context.Context, dbmodel.TraceQueryParameters) ([]dbmodel.Trace, error)) *CoreSpanReader_FindTraces_Call {
	_c.Call.Return(run)
	return _c
}

// GetOperations provides a mock function with given fields: ctx, query
func (_m *CoreSpanReader) GetOperations(ctx context.Context, query dbmodel.OperationQueryParameters) ([]dbmodel.Operation, error) {
	ret := _m.Called(ctx, query)

	if len(ret) == 0 {
		panic("no return value specified for GetOperations")
	}

	var r0 []dbmodel.Operation
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, dbmodel.OperationQueryParameters) ([]dbmodel.Operation, error)); ok {
		return rf(ctx, query)
	}
	if rf, ok := ret.Get(0).(func(context.Context, dbmodel.OperationQueryParameters) []dbmodel.Operation); ok {
		r0 = rf(ctx, query)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]dbmodel.Operation)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, dbmodel.OperationQueryParameters) error); ok {
		r1 = rf(ctx, query)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CoreSpanReader_GetOperations_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOperations'
type CoreSpanReader_GetOperations_Call struct {
	*mock.Call
}

// GetOperations is a helper method to define mock.On call
//   - ctx context.Context
//   - query dbmodel.OperationQueryParameters
func (_e *CoreSpanReader_Expecter) GetOperations(ctx interface{}, query interface{}) *CoreSpanReader_GetOperations_Call {
	return &CoreSpanReader_GetOperations_Call{Call: _e.mock.On("GetOperations", ctx, query)}
}

func (_c *CoreSpanReader_GetOperations_Call) Run(run func(ctx context.Context, query dbmodel.OperationQueryParameters)) *CoreSpanReader_GetOperations_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(dbmodel.OperationQueryParameters))
	})
	return _c
}

func (_c *CoreSpanReader_GetOperations_Call) Return(_a0 []dbmodel.Operation, _a1 error) *CoreSpanReader_GetOperations_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CoreSpanReader_GetOperations_Call) RunAndReturn(run func(context.Context, dbmodel.OperationQueryParameters) ([]dbmodel.Operation, error)) *CoreSpanReader_GetOperations_Call {
	_c.Call.Return(run)
	return _c
}

// GetServices provides a mock function with given fields: ctx
func (_m *CoreSpanReader) GetServices(ctx context.Context) ([]string, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetServices")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]string, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []string); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CoreSpanReader_GetServices_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetServices'
type CoreSpanReader_GetServices_Call struct {
	*mock.Call
}

// GetServices is a helper method to define mock.On call
//   - ctx context.Context
func (_e *CoreSpanReader_Expecter) GetServices(ctx interface{}) *CoreSpanReader_GetServices_Call {
	return &CoreSpanReader_GetServices_Call{Call: _e.mock.On("GetServices", ctx)}
}

func (_c *CoreSpanReader_GetServices_Call) Run(run func(ctx context.Context)) *CoreSpanReader_GetServices_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *CoreSpanReader_GetServices_Call) Return(_a0 []string, _a1 error) *CoreSpanReader_GetServices_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CoreSpanReader_GetServices_Call) RunAndReturn(run func(context.Context) ([]string, error)) *CoreSpanReader_GetServices_Call {
	_c.Call.Return(run)
	return _c
}

// GetTraces provides a mock function with given fields: ctx, query
func (_m *CoreSpanReader) GetTraces(ctx context.Context, query []dbmodel.TraceID) ([]dbmodel.Trace, error) {
	ret := _m.Called(ctx, query)

	if len(ret) == 0 {
		panic("no return value specified for GetTraces")
	}

	var r0 []dbmodel.Trace
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []dbmodel.TraceID) ([]dbmodel.Trace, error)); ok {
		return rf(ctx, query)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []dbmodel.TraceID) []dbmodel.Trace); ok {
		r0 = rf(ctx, query)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]dbmodel.Trace)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []dbmodel.TraceID) error); ok {
		r1 = rf(ctx, query)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CoreSpanReader_GetTraces_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTraces'
type CoreSpanReader_GetTraces_Call struct {
	*mock.Call
}

// GetTraces is a helper method to define mock.On call
//   - ctx context.Context
//   - query []dbmodel.TraceID
func (_e *CoreSpanReader_Expecter) GetTraces(ctx interface{}, query interface{}) *CoreSpanReader_GetTraces_Call {
	return &CoreSpanReader_GetTraces_Call{Call: _e.mock.On("GetTraces", ctx, query)}
}

func (_c *CoreSpanReader_GetTraces_Call) Run(run func(ctx context.Context, query []dbmodel.TraceID)) *CoreSpanReader_GetTraces_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]dbmodel.TraceID))
	})
	return _c
}

func (_c *CoreSpanReader_GetTraces_Call) Return(_a0 []dbmodel.Trace, _a1 error) *CoreSpanReader_GetTraces_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CoreSpanReader_GetTraces_Call) RunAndReturn(run func(context.Context, []dbmodel.TraceID) ([]dbmodel.Trace, error)) *CoreSpanReader_GetTraces_Call {
	_c.Call.Return(run)
	return _c
}

// NewCoreSpanReader creates a new instance of CoreSpanReader. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCoreSpanReader(t interface {
	mock.TestingT
	Cleanup(func())
}) *CoreSpanReader {
	mock := &CoreSpanReader{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Copyright (c) The Jaeger Authors.
// SPDX-License-Identifier: Apache-2.0
//
// Run 'make generate-mocks' to regenerate.

// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	apispanstore "github.com/jaegertracing/jaeger/internal/storage/v1/api/spanstore"

	dbmodel "github.com/jaegertracing/jaeger/internal/storage/v1/elasticsearch/spanstore/internal/dbmodel"

	mock "github.com/stretchr/testify/mock"

	model "github.com/jaegertracing/jaeger-idl/model/v1"
)

// CoreSpanReader is an autogenerated mock type for the CoreSpanReader type
type CoreSpanReader struct {
	mock.Mock
}

// FindTraceIDs provides a mock function with given fields: ctx, traceQuery
func (_m *CoreSpanReader) FindTraceIDs(ctx context.Context, traceQuery *dbmodel.TraceQueryParameters) ([]dbmodel.TraceID, error) {
	ret := _m.Called(ctx, traceQuery)

	if len(ret) == 0 {
		panic("no return value specified for FindTraceIDs")
	}

	var r0 []dbmodel.TraceID
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *dbmodel.TraceQueryParameters) ([]dbmodel.TraceID, error)); ok {
		return rf(ctx, traceQuery)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *dbmodel.TraceQueryParameters) []dbmodel.TraceID); ok {
		r0 = rf(ctx, traceQuery)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]dbmodel.TraceID)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *dbmodel.TraceQueryParameters) error); ok {
		r1 = rf(ctx, traceQuery)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindTraces provides a mock function with given fields: ctx, traceQuery
func (_m *CoreSpanReader) FindTraces(ctx context.Context, traceQuery *dbmodel.TraceQueryParameters) ([]*model.Trace, error) {
	ret := _m.Called(ctx, traceQuery)

	if len(ret) == 0 {
		panic("no return value specified for FindTraces")
	}

	var r0 []*model.Trace
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *dbmodel.TraceQueryParameters) ([]*model.Trace, error)); ok {
		return rf(ctx, traceQuery)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *dbmodel.TraceQueryParameters) []*model.Trace); ok {
		r0 = rf(ctx, traceQuery)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Trace)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *dbmodel.TraceQueryParameters) error); ok {
		r1 = rf(ctx, traceQuery)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOperations provides a mock function with given fields: ctx, query
func (_m *CoreSpanReader) GetOperations(ctx context.Context, query dbmodel.OperationQueryParameters) ([]dbmodel.Operation, error) {
	ret := _m.Called(ctx, query)

	if len(ret) == 0 {
		panic("no return value specified for GetOperations")
	}

	var r0 []dbmodel.Operation
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, dbmodel.OperationQueryParameters) ([]dbmodel.Operation, error)); ok {
		return rf(ctx, query)
	}
	if rf, ok := ret.Get(0).(func(context.Context, dbmodel.OperationQueryParameters) []dbmodel.Operation); ok {
		r0 = rf(ctx, query)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]dbmodel.Operation)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, dbmodel.OperationQueryParameters) error); ok {
		r1 = rf(ctx, query)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetServices provides a mock function with given fields: ctx
func (_m *CoreSpanReader) GetServices(ctx context.Context) ([]string, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetServices")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]string, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []string); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTrace provides a mock function with given fields: ctx, query
func (_m *CoreSpanReader) GetTrace(ctx context.Context, query apispanstore.GetTraceParameters) (*model.Trace, error) {
	ret := _m.Called(ctx, query)

	if len(ret) == 0 {
		panic("no return value specified for GetTrace")
	}

	var r0 *model.Trace
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, apispanstore.GetTraceParameters) (*model.Trace, error)); ok {
		return rf(ctx, query)
	}
	if rf, ok := ret.Get(0).(func(context.Context, apispanstore.GetTraceParameters) *model.Trace); ok {
		r0 = rf(ctx, query)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Trace)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, apispanstore.GetTraceParameters) error); ok {
		r1 = rf(ctx, query)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewCoreSpanReader creates a new instance of CoreSpanReader. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCoreSpanReader(t interface {
	mock.TestingT
	Cleanup(func())
}) *CoreSpanReader {
	mock := &CoreSpanReader{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

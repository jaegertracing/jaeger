// Copyright (c) The Jaeger Authors.
// SPDX-License-Identifier: Apache-2.0
//
// Run 'make generate-mocks' to regenerate.

// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// Purger is an autogenerated mock type for the Purger type
type Purger struct {
	mock.Mock
}

type Purger_Expecter struct {
	mock *mock.Mock
}

func (_m *Purger) EXPECT() *Purger_Expecter {
	return &Purger_Expecter{mock: &_m.Mock}
}

// Purge provides a mock function with given fields: _a0
func (_m *Purger) Purge(_a0 context.Context) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Purge")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Purger_Purge_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Purge'
type Purger_Purge_Call struct {
	*mock.Call
}

// Purge is a helper method to define mock.On call
//   - _a0 context.Context
func (_e *Purger_Expecter) Purge(_a0 interface{}) *Purger_Purge_Call {
	return &Purger_Purge_Call{Call: _e.mock.On("Purge", _a0)}
}

func (_c *Purger_Purge_Call) Run(run func(_a0 context.Context)) *Purger_Purge_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *Purger_Purge_Call) Return(_a0 error) *Purger_Purge_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Purger_Purge_Call) RunAndReturn(run func(context.Context) error) *Purger_Purge_Call {
	_c.Call.Return(run)
	return _c
}

// NewPurger creates a new instance of Purger. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPurger(t interface {
	mock.TestingT
	Cleanup(func())
}) *Purger {
	mock := &Purger{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

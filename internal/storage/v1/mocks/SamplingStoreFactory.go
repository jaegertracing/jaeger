// Copyright (c) The Jaeger Authors.
// SPDX-License-Identifier: Apache-2.0
//
// Run 'make generate-mocks' to regenerate.

// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	distributedlock "github.com/jaegertracing/jaeger/pkg/distributedlock"
	mock "github.com/stretchr/testify/mock"

	samplingstore "github.com/jaegertracing/jaeger/internal/storage/v1/api/samplingstore"
)

// SamplingStoreFactory is an autogenerated mock type for the SamplingStoreFactory type
type SamplingStoreFactory struct {
	mock.Mock
}

// CreateLock provides a mock function with no fields
func (_m *SamplingStoreFactory) CreateLock() (distributedlock.Lock, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for CreateLock")
	}

	var r0 distributedlock.Lock
	var r1 error
	if rf, ok := ret.Get(0).(func() (distributedlock.Lock, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() distributedlock.Lock); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(distributedlock.Lock)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateSamplingStore provides a mock function with given fields: maxBuckets
func (_m *SamplingStoreFactory) CreateSamplingStore(maxBuckets int) (samplingstore.Store, error) {
	ret := _m.Called(maxBuckets)

	if len(ret) == 0 {
		panic("no return value specified for CreateSamplingStore")
	}

	var r0 samplingstore.Store
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (samplingstore.Store, error)); ok {
		return rf(maxBuckets)
	}
	if rf, ok := ret.Get(0).(func(int) samplingstore.Store); ok {
		r0 = rf(maxBuckets)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(samplingstore.Store)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(maxBuckets)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewSamplingStoreFactory creates a new instance of SamplingStoreFactory. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSamplingStoreFactory(t interface {
	mock.TestingT
	Cleanup(func())
}) *SamplingStoreFactory {
	mock := &SamplingStoreFactory{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

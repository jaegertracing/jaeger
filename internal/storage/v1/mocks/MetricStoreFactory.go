// Copyright (c) The Jaeger Authors.
// SPDX-License-Identifier: Apache-2.0
//
// Run 'make generate-mocks' to regenerate.

// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	metricstore "github.com/jaegertracing/jaeger/internal/storage/v1/api/metricstore"
	mock "github.com/stretchr/testify/mock"

	telemetry "github.com/jaegertracing/jaeger/internal/telemetry"
)

// MetricStoreFactory is an autogenerated mock type for the MetricStoreFactory type
type MetricStoreFactory struct {
	mock.Mock
}

type MetricStoreFactory_Expecter struct {
	mock *mock.Mock
}

func (_m *MetricStoreFactory) EXPECT() *MetricStoreFactory_Expecter {
	return &MetricStoreFactory_Expecter{mock: &_m.Mock}
}

// CreateMetricsReader provides a mock function with no fields
func (_m *MetricStoreFactory) CreateMetricsReader() (metricstore.Reader, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for CreateMetricsReader")
	}

	var r0 metricstore.Reader
	var r1 error
	if rf, ok := ret.Get(0).(func() (metricstore.Reader, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() metricstore.Reader); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(metricstore.Reader)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MetricStoreFactory_CreateMetricsReader_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateMetricsReader'
type MetricStoreFactory_CreateMetricsReader_Call struct {
	*mock.Call
}

// CreateMetricsReader is a helper method to define mock.On call
func (_e *MetricStoreFactory_Expecter) CreateMetricsReader() *MetricStoreFactory_CreateMetricsReader_Call {
	return &MetricStoreFactory_CreateMetricsReader_Call{Call: _e.mock.On("CreateMetricsReader")}
}

func (_c *MetricStoreFactory_CreateMetricsReader_Call) Run(run func()) *MetricStoreFactory_CreateMetricsReader_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MetricStoreFactory_CreateMetricsReader_Call) Return(_a0 metricstore.Reader, _a1 error) *MetricStoreFactory_CreateMetricsReader_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MetricStoreFactory_CreateMetricsReader_Call) RunAndReturn(run func() (metricstore.Reader, error)) *MetricStoreFactory_CreateMetricsReader_Call {
	_c.Call.Return(run)
	return _c
}

// Initialize provides a mock function with given fields: telset
func (_m *MetricStoreFactory) Initialize(telset telemetry.Settings) error {
	ret := _m.Called(telset)

	if len(ret) == 0 {
		panic("no return value specified for Initialize")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(telemetry.Settings) error); ok {
		r0 = rf(telset)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MetricStoreFactory_Initialize_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Initialize'
type MetricStoreFactory_Initialize_Call struct {
	*mock.Call
}

// Initialize is a helper method to define mock.On call
//   - telset telemetry.Settings
func (_e *MetricStoreFactory_Expecter) Initialize(telset interface{}) *MetricStoreFactory_Initialize_Call {
	return &MetricStoreFactory_Initialize_Call{Call: _e.mock.On("Initialize", telset)}
}

func (_c *MetricStoreFactory_Initialize_Call) Run(run func(telset telemetry.Settings)) *MetricStoreFactory_Initialize_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(telemetry.Settings))
	})
	return _c
}

func (_c *MetricStoreFactory_Initialize_Call) Return(_a0 error) *MetricStoreFactory_Initialize_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MetricStoreFactory_Initialize_Call) RunAndReturn(run func(telemetry.Settings) error) *MetricStoreFactory_Initialize_Call {
	_c.Call.Return(run)
	return _c
}

// NewMetricStoreFactory creates a new instance of MetricStoreFactory. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMetricStoreFactory(t interface {
	mock.TestingT
	Cleanup(func())
}) *MetricStoreFactory {
	mock := &MetricStoreFactory{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

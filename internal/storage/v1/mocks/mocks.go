// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify
// Copyright (c) The Jaeger Authors.
// SPDX-License-Identifier: Apache-2.0
//
// Run 'make generate-mocks' to regenerate.

package mocks

import (
	"context"
	"flag"

	"github.com/jaegertracing/jaeger/internal/distributedlock"
	"github.com/jaegertracing/jaeger/internal/metrics"
	"github.com/jaegertracing/jaeger/internal/storage/v1"
	"github.com/jaegertracing/jaeger/internal/storage/v1/api/dependencystore"
	"github.com/jaegertracing/jaeger/internal/storage/v1/api/metricstore"
	"github.com/jaegertracing/jaeger/internal/storage/v1/api/samplingstore"
	"github.com/jaegertracing/jaeger/internal/storage/v1/api/spanstore"
	"github.com/jaegertracing/jaeger/internal/telemetry"
	"github.com/spf13/viper"
	mock "github.com/stretchr/testify/mock"
	"go.uber.org/zap"
)

// NewConfigurable creates a new instance of Configurable. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewConfigurable(t interface {
	mock.TestingT
	Cleanup(func())
}) *Configurable {
	mock := &Configurable{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Configurable is an autogenerated mock type for the Configurable type
type Configurable struct {
	mock.Mock
}

type Configurable_Expecter struct {
	mock *mock.Mock
}

func (_m *Configurable) EXPECT() *Configurable_Expecter {
	return &Configurable_Expecter{mock: &_m.Mock}
}

// AddFlags provides a mock function for the type Configurable
func (_mock *Configurable) AddFlags(flagSet *flag.FlagSet) {
	_mock.Called(flagSet)
	return
}

// Configurable_AddFlags_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddFlags'
type Configurable_AddFlags_Call struct {
	*mock.Call
}

// AddFlags is a helper method to define mock.On call
//   - flagSet *flag.FlagSet
func (_e *Configurable_Expecter) AddFlags(flagSet interface{}) *Configurable_AddFlags_Call {
	return &Configurable_AddFlags_Call{Call: _e.mock.On("AddFlags", flagSet)}
}

func (_c *Configurable_AddFlags_Call) Run(run func(flagSet *flag.FlagSet)) *Configurable_AddFlags_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *flag.FlagSet
		if args[0] != nil {
			arg0 = args[0].(*flag.FlagSet)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *Configurable_AddFlags_Call) Return() *Configurable_AddFlags_Call {
	_c.Call.Return()
	return _c
}

func (_c *Configurable_AddFlags_Call) RunAndReturn(run func(flagSet *flag.FlagSet)) *Configurable_AddFlags_Call {
	_c.Run(run)
	return _c
}

// InitFromViper provides a mock function for the type Configurable
func (_mock *Configurable) InitFromViper(v *viper.Viper, logger *zap.Logger) {
	_mock.Called(v, logger)
	return
}

// Configurable_InitFromViper_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InitFromViper'
type Configurable_InitFromViper_Call struct {
	*mock.Call
}

// InitFromViper is a helper method to define mock.On call
//   - v *viper.Viper
//   - logger *zap.Logger
func (_e *Configurable_Expecter) InitFromViper(v interface{}, logger interface{}) *Configurable_InitFromViper_Call {
	return &Configurable_InitFromViper_Call{Call: _e.mock.On("InitFromViper", v, logger)}
}

func (_c *Configurable_InitFromViper_Call) Run(run func(v *viper.Viper, logger *zap.Logger)) *Configurable_InitFromViper_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *viper.Viper
		if args[0] != nil {
			arg0 = args[0].(*viper.Viper)
		}
		var arg1 *zap.Logger
		if args[1] != nil {
			arg1 = args[1].(*zap.Logger)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *Configurable_InitFromViper_Call) Return() *Configurable_InitFromViper_Call {
	_c.Call.Return()
	return _c
}

func (_c *Configurable_InitFromViper_Call) RunAndReturn(run func(v *viper.Viper, logger *zap.Logger)) *Configurable_InitFromViper_Call {
	_c.Run(run)
	return _c
}

// NewBaseFactory creates a new instance of BaseFactory. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBaseFactory(t interface {
	mock.TestingT
	Cleanup(func())
}) *BaseFactory {
	mock := &BaseFactory{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// BaseFactory is an autogenerated mock type for the BaseFactory type
type BaseFactory struct {
	mock.Mock
}

type BaseFactory_Expecter struct {
	mock *mock.Mock
}

func (_m *BaseFactory) EXPECT() *BaseFactory_Expecter {
	return &BaseFactory_Expecter{mock: &_m.Mock}
}

// CreateDependencyReader provides a mock function for the type BaseFactory
func (_mock *BaseFactory) CreateDependencyReader() (dependencystore.Reader, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for CreateDependencyReader")
	}

	var r0 dependencystore.Reader
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() (dependencystore.Reader, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() dependencystore.Reader); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(dependencystore.Reader)
		}
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// BaseFactory_CreateDependencyReader_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateDependencyReader'
type BaseFactory_CreateDependencyReader_Call struct {
	*mock.Call
}

// CreateDependencyReader is a helper method to define mock.On call
func (_e *BaseFactory_Expecter) CreateDependencyReader() *BaseFactory_CreateDependencyReader_Call {
	return &BaseFactory_CreateDependencyReader_Call{Call: _e.mock.On("CreateDependencyReader")}
}

func (_c *BaseFactory_CreateDependencyReader_Call) Run(run func()) *BaseFactory_CreateDependencyReader_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *BaseFactory_CreateDependencyReader_Call) Return(reader dependencystore.Reader, err error) *BaseFactory_CreateDependencyReader_Call {
	_c.Call.Return(reader, err)
	return _c
}

func (_c *BaseFactory_CreateDependencyReader_Call) RunAndReturn(run func() (dependencystore.Reader, error)) *BaseFactory_CreateDependencyReader_Call {
	_c.Call.Return(run)
	return _c
}

// CreateSpanReader provides a mock function for the type BaseFactory
func (_mock *BaseFactory) CreateSpanReader() (spanstore.Reader, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for CreateSpanReader")
	}

	var r0 spanstore.Reader
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() (spanstore.Reader, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() spanstore.Reader); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(spanstore.Reader)
		}
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// BaseFactory_CreateSpanReader_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateSpanReader'
type BaseFactory_CreateSpanReader_Call struct {
	*mock.Call
}

// CreateSpanReader is a helper method to define mock.On call
func (_e *BaseFactory_Expecter) CreateSpanReader() *BaseFactory_CreateSpanReader_Call {
	return &BaseFactory_CreateSpanReader_Call{Call: _e.mock.On("CreateSpanReader")}
}

func (_c *BaseFactory_CreateSpanReader_Call) Run(run func()) *BaseFactory_CreateSpanReader_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *BaseFactory_CreateSpanReader_Call) Return(reader spanstore.Reader, err error) *BaseFactory_CreateSpanReader_Call {
	_c.Call.Return(reader, err)
	return _c
}

func (_c *BaseFactory_CreateSpanReader_Call) RunAndReturn(run func() (spanstore.Reader, error)) *BaseFactory_CreateSpanReader_Call {
	_c.Call.Return(run)
	return _c
}

// CreateSpanWriter provides a mock function for the type BaseFactory
func (_mock *BaseFactory) CreateSpanWriter() (spanstore.Writer, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for CreateSpanWriter")
	}

	var r0 spanstore.Writer
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() (spanstore.Writer, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() spanstore.Writer); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(spanstore.Writer)
		}
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// BaseFactory_CreateSpanWriter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateSpanWriter'
type BaseFactory_CreateSpanWriter_Call struct {
	*mock.Call
}

// CreateSpanWriter is a helper method to define mock.On call
func (_e *BaseFactory_Expecter) CreateSpanWriter() *BaseFactory_CreateSpanWriter_Call {
	return &BaseFactory_CreateSpanWriter_Call{Call: _e.mock.On("CreateSpanWriter")}
}

func (_c *BaseFactory_CreateSpanWriter_Call) Run(run func()) *BaseFactory_CreateSpanWriter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *BaseFactory_CreateSpanWriter_Call) Return(writer spanstore.Writer, err error) *BaseFactory_CreateSpanWriter_Call {
	_c.Call.Return(writer, err)
	return _c
}

func (_c *BaseFactory_CreateSpanWriter_Call) RunAndReturn(run func() (spanstore.Writer, error)) *BaseFactory_CreateSpanWriter_Call {
	_c.Call.Return(run)
	return _c
}

// NewFactory creates a new instance of Factory. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewFactory(t interface {
	mock.TestingT
	Cleanup(func())
}) *Factory {
	mock := &Factory{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Factory is an autogenerated mock type for the Factory type
type Factory struct {
	mock.Mock
}

type Factory_Expecter struct {
	mock *mock.Mock
}

func (_m *Factory) EXPECT() *Factory_Expecter {
	return &Factory_Expecter{mock: &_m.Mock}
}

// CreateDependencyReader provides a mock function for the type Factory
func (_mock *Factory) CreateDependencyReader() (dependencystore.Reader, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for CreateDependencyReader")
	}

	var r0 dependencystore.Reader
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() (dependencystore.Reader, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() dependencystore.Reader); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(dependencystore.Reader)
		}
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Factory_CreateDependencyReader_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateDependencyReader'
type Factory_CreateDependencyReader_Call struct {
	*mock.Call
}

// CreateDependencyReader is a helper method to define mock.On call
func (_e *Factory_Expecter) CreateDependencyReader() *Factory_CreateDependencyReader_Call {
	return &Factory_CreateDependencyReader_Call{Call: _e.mock.On("CreateDependencyReader")}
}

func (_c *Factory_CreateDependencyReader_Call) Run(run func()) *Factory_CreateDependencyReader_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Factory_CreateDependencyReader_Call) Return(reader dependencystore.Reader, err error) *Factory_CreateDependencyReader_Call {
	_c.Call.Return(reader, err)
	return _c
}

func (_c *Factory_CreateDependencyReader_Call) RunAndReturn(run func() (dependencystore.Reader, error)) *Factory_CreateDependencyReader_Call {
	_c.Call.Return(run)
	return _c
}

// CreateSpanReader provides a mock function for the type Factory
func (_mock *Factory) CreateSpanReader() (spanstore.Reader, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for CreateSpanReader")
	}

	var r0 spanstore.Reader
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() (spanstore.Reader, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() spanstore.Reader); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(spanstore.Reader)
		}
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Factory_CreateSpanReader_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateSpanReader'
type Factory_CreateSpanReader_Call struct {
	*mock.Call
}

// CreateSpanReader is a helper method to define mock.On call
func (_e *Factory_Expecter) CreateSpanReader() *Factory_CreateSpanReader_Call {
	return &Factory_CreateSpanReader_Call{Call: _e.mock.On("CreateSpanReader")}
}

func (_c *Factory_CreateSpanReader_Call) Run(run func()) *Factory_CreateSpanReader_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Factory_CreateSpanReader_Call) Return(reader spanstore.Reader, err error) *Factory_CreateSpanReader_Call {
	_c.Call.Return(reader, err)
	return _c
}

func (_c *Factory_CreateSpanReader_Call) RunAndReturn(run func() (spanstore.Reader, error)) *Factory_CreateSpanReader_Call {
	_c.Call.Return(run)
	return _c
}

// CreateSpanWriter provides a mock function for the type Factory
func (_mock *Factory) CreateSpanWriter() (spanstore.Writer, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for CreateSpanWriter")
	}

	var r0 spanstore.Writer
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() (spanstore.Writer, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() spanstore.Writer); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(spanstore.Writer)
		}
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Factory_CreateSpanWriter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateSpanWriter'
type Factory_CreateSpanWriter_Call struct {
	*mock.Call
}

// CreateSpanWriter is a helper method to define mock.On call
func (_e *Factory_Expecter) CreateSpanWriter() *Factory_CreateSpanWriter_Call {
	return &Factory_CreateSpanWriter_Call{Call: _e.mock.On("CreateSpanWriter")}
}

func (_c *Factory_CreateSpanWriter_Call) Run(run func()) *Factory_CreateSpanWriter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Factory_CreateSpanWriter_Call) Return(writer spanstore.Writer, err error) *Factory_CreateSpanWriter_Call {
	_c.Call.Return(writer, err)
	return _c
}

func (_c *Factory_CreateSpanWriter_Call) RunAndReturn(run func() (spanstore.Writer, error)) *Factory_CreateSpanWriter_Call {
	_c.Call.Return(run)
	return _c
}

// Initialize provides a mock function for the type Factory
func (_mock *Factory) Initialize(metricsFactory metrics.Factory, logger *zap.Logger) error {
	ret := _mock.Called(metricsFactory, logger)

	if len(ret) == 0 {
		panic("no return value specified for Initialize")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(metrics.Factory, *zap.Logger) error); ok {
		r0 = returnFunc(metricsFactory, logger)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Factory_Initialize_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Initialize'
type Factory_Initialize_Call struct {
	*mock.Call
}

// Initialize is a helper method to define mock.On call
//   - metricsFactory metrics.Factory
//   - logger *zap.Logger
func (_e *Factory_Expecter) Initialize(metricsFactory interface{}, logger interface{}) *Factory_Initialize_Call {
	return &Factory_Initialize_Call{Call: _e.mock.On("Initialize", metricsFactory, logger)}
}

func (_c *Factory_Initialize_Call) Run(run func(metricsFactory metrics.Factory, logger *zap.Logger)) *Factory_Initialize_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 metrics.Factory
		if args[0] != nil {
			arg0 = args[0].(metrics.Factory)
		}
		var arg1 *zap.Logger
		if args[1] != nil {
			arg1 = args[1].(*zap.Logger)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *Factory_Initialize_Call) Return(err error) *Factory_Initialize_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Factory_Initialize_Call) RunAndReturn(run func(metricsFactory metrics.Factory, logger *zap.Logger) error) *Factory_Initialize_Call {
	_c.Call.Return(run)
	return _c
}

// NewPurger creates a new instance of Purger. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPurger(t interface {
	mock.TestingT
	Cleanup(func())
}) *Purger {
	mock := &Purger{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Purger is an autogenerated mock type for the Purger type
type Purger struct {
	mock.Mock
}

type Purger_Expecter struct {
	mock *mock.Mock
}

func (_m *Purger) EXPECT() *Purger_Expecter {
	return &Purger_Expecter{mock: &_m.Mock}
}

// Purge provides a mock function for the type Purger
func (_mock *Purger) Purge(context1 context.Context) error {
	ret := _mock.Called(context1)

	if len(ret) == 0 {
		panic("no return value specified for Purge")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = returnFunc(context1)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Purger_Purge_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Purge'
type Purger_Purge_Call struct {
	*mock.Call
}

// Purge is a helper method to define mock.On call
//   - context1 context.Context
func (_e *Purger_Expecter) Purge(context1 interface{}) *Purger_Purge_Call {
	return &Purger_Purge_Call{Call: _e.mock.On("Purge", context1)}
}

func (_c *Purger_Purge_Call) Run(run func(context1 context.Context)) *Purger_Purge_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *Purger_Purge_Call) Return(err error) *Purger_Purge_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Purger_Purge_Call) RunAndReturn(run func(context1 context.Context) error) *Purger_Purge_Call {
	_c.Call.Return(run)
	return _c
}

// NewSamplingStoreFactory creates a new instance of SamplingStoreFactory. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSamplingStoreFactory(t interface {
	mock.TestingT
	Cleanup(func())
}) *SamplingStoreFactory {
	mock := &SamplingStoreFactory{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// SamplingStoreFactory is an autogenerated mock type for the SamplingStoreFactory type
type SamplingStoreFactory struct {
	mock.Mock
}

type SamplingStoreFactory_Expecter struct {
	mock *mock.Mock
}

func (_m *SamplingStoreFactory) EXPECT() *SamplingStoreFactory_Expecter {
	return &SamplingStoreFactory_Expecter{mock: &_m.Mock}
}

// CreateLock provides a mock function for the type SamplingStoreFactory
func (_mock *SamplingStoreFactory) CreateLock() (distributedlock.Lock, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for CreateLock")
	}

	var r0 distributedlock.Lock
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() (distributedlock.Lock, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() distributedlock.Lock); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(distributedlock.Lock)
		}
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// SamplingStoreFactory_CreateLock_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateLock'
type SamplingStoreFactory_CreateLock_Call struct {
	*mock.Call
}

// CreateLock is a helper method to define mock.On call
func (_e *SamplingStoreFactory_Expecter) CreateLock() *SamplingStoreFactory_CreateLock_Call {
	return &SamplingStoreFactory_CreateLock_Call{Call: _e.mock.On("CreateLock")}
}

func (_c *SamplingStoreFactory_CreateLock_Call) Run(run func()) *SamplingStoreFactory_CreateLock_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *SamplingStoreFactory_CreateLock_Call) Return(lock distributedlock.Lock, err error) *SamplingStoreFactory_CreateLock_Call {
	_c.Call.Return(lock, err)
	return _c
}

func (_c *SamplingStoreFactory_CreateLock_Call) RunAndReturn(run func() (distributedlock.Lock, error)) *SamplingStoreFactory_CreateLock_Call {
	_c.Call.Return(run)
	return _c
}

// CreateSamplingStore provides a mock function for the type SamplingStoreFactory
func (_mock *SamplingStoreFactory) CreateSamplingStore(maxBuckets int) (samplingstore.Store, error) {
	ret := _mock.Called(maxBuckets)

	if len(ret) == 0 {
		panic("no return value specified for CreateSamplingStore")
	}

	var r0 samplingstore.Store
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(int) (samplingstore.Store, error)); ok {
		return returnFunc(maxBuckets)
	}
	if returnFunc, ok := ret.Get(0).(func(int) samplingstore.Store); ok {
		r0 = returnFunc(maxBuckets)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(samplingstore.Store)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(int) error); ok {
		r1 = returnFunc(maxBuckets)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// SamplingStoreFactory_CreateSamplingStore_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateSamplingStore'
type SamplingStoreFactory_CreateSamplingStore_Call struct {
	*mock.Call
}

// CreateSamplingStore is a helper method to define mock.On call
//   - maxBuckets int
func (_e *SamplingStoreFactory_Expecter) CreateSamplingStore(maxBuckets interface{}) *SamplingStoreFactory_CreateSamplingStore_Call {
	return &SamplingStoreFactory_CreateSamplingStore_Call{Call: _e.mock.On("CreateSamplingStore", maxBuckets)}
}

func (_c *SamplingStoreFactory_CreateSamplingStore_Call) Run(run func(maxBuckets int)) *SamplingStoreFactory_CreateSamplingStore_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 int
		if args[0] != nil {
			arg0 = args[0].(int)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *SamplingStoreFactory_CreateSamplingStore_Call) Return(store samplingstore.Store, err error) *SamplingStoreFactory_CreateSamplingStore_Call {
	_c.Call.Return(store, err)
	return _c
}

func (_c *SamplingStoreFactory_CreateSamplingStore_Call) RunAndReturn(run func(maxBuckets int) (samplingstore.Store, error)) *SamplingStoreFactory_CreateSamplingStore_Call {
	_c.Call.Return(run)
	return _c
}

// NewMetricStoreFactory creates a new instance of MetricStoreFactory. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMetricStoreFactory(t interface {
	mock.TestingT
	Cleanup(func())
}) *MetricStoreFactory {
	mock := &MetricStoreFactory{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MetricStoreFactory is an autogenerated mock type for the MetricStoreFactory type
type MetricStoreFactory struct {
	mock.Mock
}

type MetricStoreFactory_Expecter struct {
	mock *mock.Mock
}

func (_m *MetricStoreFactory) EXPECT() *MetricStoreFactory_Expecter {
	return &MetricStoreFactory_Expecter{mock: &_m.Mock}
}

// CreateMetricsReader provides a mock function for the type MetricStoreFactory
func (_mock *MetricStoreFactory) CreateMetricsReader() (metricstore.Reader, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for CreateMetricsReader")
	}

	var r0 metricstore.Reader
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() (metricstore.Reader, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() metricstore.Reader); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(metricstore.Reader)
		}
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MetricStoreFactory_CreateMetricsReader_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateMetricsReader'
type MetricStoreFactory_CreateMetricsReader_Call struct {
	*mock.Call
}

// CreateMetricsReader is a helper method to define mock.On call
func (_e *MetricStoreFactory_Expecter) CreateMetricsReader() *MetricStoreFactory_CreateMetricsReader_Call {
	return &MetricStoreFactory_CreateMetricsReader_Call{Call: _e.mock.On("CreateMetricsReader")}
}

func (_c *MetricStoreFactory_CreateMetricsReader_Call) Run(run func()) *MetricStoreFactory_CreateMetricsReader_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MetricStoreFactory_CreateMetricsReader_Call) Return(reader metricstore.Reader, err error) *MetricStoreFactory_CreateMetricsReader_Call {
	_c.Call.Return(reader, err)
	return _c
}

func (_c *MetricStoreFactory_CreateMetricsReader_Call) RunAndReturn(run func() (metricstore.Reader, error)) *MetricStoreFactory_CreateMetricsReader_Call {
	_c.Call.Return(run)
	return _c
}

// Initialize provides a mock function for the type MetricStoreFactory
func (_mock *MetricStoreFactory) Initialize(telset telemetry.Settings) error {
	ret := _mock.Called(telset)

	if len(ret) == 0 {
		panic("no return value specified for Initialize")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(telemetry.Settings) error); ok {
		r0 = returnFunc(telset)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MetricStoreFactory_Initialize_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Initialize'
type MetricStoreFactory_Initialize_Call struct {
	*mock.Call
}

// Initialize is a helper method to define mock.On call
//   - telset telemetry.Settings
func (_e *MetricStoreFactory_Expecter) Initialize(telset interface{}) *MetricStoreFactory_Initialize_Call {
	return &MetricStoreFactory_Initialize_Call{Call: _e.mock.On("Initialize", telset)}
}

func (_c *MetricStoreFactory_Initialize_Call) Run(run func(telset telemetry.Settings)) *MetricStoreFactory_Initialize_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 telemetry.Settings
		if args[0] != nil {
			arg0 = args[0].(telemetry.Settings)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MetricStoreFactory_Initialize_Call) Return(err error) *MetricStoreFactory_Initialize_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MetricStoreFactory_Initialize_Call) RunAndReturn(run func(telset telemetry.Settings) error) *MetricStoreFactory_Initialize_Call {
	_c.Call.Return(run)
	return _c
}

// NewInheritable creates a new instance of Inheritable. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewInheritable(t interface {
	mock.TestingT
	Cleanup(func())
}) *Inheritable {
	mock := &Inheritable{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Inheritable is an autogenerated mock type for the Inheritable type
type Inheritable struct {
	mock.Mock
}

type Inheritable_Expecter struct {
	mock *mock.Mock
}

func (_m *Inheritable) EXPECT() *Inheritable_Expecter {
	return &Inheritable_Expecter{mock: &_m.Mock}
}

// InheritSettingsFrom provides a mock function for the type Inheritable
func (_mock *Inheritable) InheritSettingsFrom(other storage.Factory) {
	_mock.Called(other)
	return
}

// Inheritable_InheritSettingsFrom_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InheritSettingsFrom'
type Inheritable_InheritSettingsFrom_Call struct {
	*mock.Call
}

// InheritSettingsFrom is a helper method to define mock.On call
//   - other storage.Factory
func (_e *Inheritable_Expecter) InheritSettingsFrom(other interface{}) *Inheritable_InheritSettingsFrom_Call {
	return &Inheritable_InheritSettingsFrom_Call{Call: _e.mock.On("InheritSettingsFrom", other)}
}

func (_c *Inheritable_InheritSettingsFrom_Call) Run(run func(other storage.Factory)) *Inheritable_InheritSettingsFrom_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 storage.Factory
		if args[0] != nil {
			arg0 = args[0].(storage.Factory)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *Inheritable_InheritSettingsFrom_Call) Return() *Inheritable_InheritSettingsFrom_Call {
	_c.Call.Return()
	return _c
}

func (_c *Inheritable_InheritSettingsFrom_Call) RunAndReturn(run func(other storage.Factory)) *Inheritable_InheritSettingsFrom_Call {
	_c.Run(run)
	return _c
}

// NewArchiveCapable creates a new instance of ArchiveCapable. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewArchiveCapable(t interface {
	mock.TestingT
	Cleanup(func())
}) *ArchiveCapable {
	mock := &ArchiveCapable{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// ArchiveCapable is an autogenerated mock type for the ArchiveCapable type
type ArchiveCapable struct {
	mock.Mock
}

type ArchiveCapable_Expecter struct {
	mock *mock.Mock
}

func (_m *ArchiveCapable) EXPECT() *ArchiveCapable_Expecter {
	return &ArchiveCapable_Expecter{mock: &_m.Mock}
}

// IsArchiveCapable provides a mock function for the type ArchiveCapable
func (_mock *ArchiveCapable) IsArchiveCapable() bool {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for IsArchiveCapable")
	}

	var r0 bool
	if returnFunc, ok := ret.Get(0).(func() bool); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(bool)
	}
	return r0
}

// ArchiveCapable_IsArchiveCapable_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsArchiveCapable'
type ArchiveCapable_IsArchiveCapable_Call struct {
	*mock.Call
}

// IsArchiveCapable is a helper method to define mock.On call
func (_e *ArchiveCapable_Expecter) IsArchiveCapable() *ArchiveCapable_IsArchiveCapable_Call {
	return &ArchiveCapable_IsArchiveCapable_Call{Call: _e.mock.On("IsArchiveCapable")}
}

func (_c *ArchiveCapable_IsArchiveCapable_Call) Run(run func()) *ArchiveCapable_IsArchiveCapable_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ArchiveCapable_IsArchiveCapable_Call) Return(b bool) *ArchiveCapable_IsArchiveCapable_Call {
	_c.Call.Return(b)
	return _c
}

func (_c *ArchiveCapable_IsArchiveCapable_Call) RunAndReturn(run func() bool) *ArchiveCapable_IsArchiveCapable_Call {
	_c.Call.Return(run)
	return _c
}

// Copyright (c) The Jaeger Authors.
// SPDX-License-Identifier: Apache-2.0
//
// Run 'make generate-mocks' to regenerate.

// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	flag "flag"

	mock "github.com/stretchr/testify/mock"

	viper "github.com/spf13/viper"

	zap "go.uber.org/zap"
)

// Configurable is an autogenerated mock type for the Configurable type
type Configurable struct {
	mock.Mock
}

// AddFlags provides a mock function with given fields: flagSet
func (_m *Configurable) AddFlags(flagSet *flag.FlagSet) {
	_m.Called(flagSet)
}

// InitFromViper provides a mock function with given fields: v, logger
func (_m *Configurable) InitFromViper(v *viper.Viper, logger *zap.Logger) {
	_m.Called(v, logger)
}

// NewConfigurable creates a new instance of Configurable. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewConfigurable(t interface {
	mock.TestingT
	Cleanup(func())
}) *Configurable {
	mock := &Configurable{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

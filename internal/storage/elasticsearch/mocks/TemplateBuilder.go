// Copyright (c) The Jaeger Authors.
// SPDX-License-Identifier: Apache-2.0
//
// Run 'make generate-mocks' to regenerate.

// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	es "github.com/jaegertracing/jaeger/internal/storage/elasticsearch"
	mock "github.com/stretchr/testify/mock"
)

// TemplateBuilder is an autogenerated mock type for the TemplateBuilder type
type TemplateBuilder struct {
	mock.Mock
}

// Parse provides a mock function with given fields: text
func (_m *TemplateBuilder) Parse(text string) (es.TemplateApplier, error) {
	ret := _m.Called(text)

	if len(ret) == 0 {
		panic("no return value specified for Parse")
	}

	var r0 es.TemplateApplier
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (es.TemplateApplier, error)); ok {
		return rf(text)
	}
	if rf, ok := ret.Get(0).(func(string) es.TemplateApplier); ok {
		r0 = rf(text)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(es.TemplateApplier)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(text)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewTemplateBuilder creates a new instance of TemplateBuilder. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTemplateBuilder(t interface {
	mock.TestingT
	Cleanup(func())
}) *TemplateBuilder {
	mock := &TemplateBuilder{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

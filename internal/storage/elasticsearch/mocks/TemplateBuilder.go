// Copyright (c) The Jaeger Authors.
// SPDX-License-Identifier: Apache-2.0
//
// Run 'make generate-mocks' to regenerate.

// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	elasticsearch "github.com/jaegertracing/jaeger/internal/storage/elasticsearch"
	mock "github.com/stretchr/testify/mock"
)

// TemplateBuilder is an autogenerated mock type for the TemplateBuilder type
type TemplateBuilder struct {
	mock.Mock
}

type TemplateBuilder_Expecter struct {
	mock *mock.Mock
}

func (_m *TemplateBuilder) EXPECT() *TemplateBuilder_Expecter {
	return &TemplateBuilder_Expecter{mock: &_m.Mock}
}

// Parse provides a mock function with given fields: text
func (_m *TemplateBuilder) Parse(text string) (elasticsearch.TemplateApplier, error) {
	ret := _m.Called(text)

	if len(ret) == 0 {
		panic("no return value specified for Parse")
	}

	var r0 elasticsearch.TemplateApplier
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (elasticsearch.TemplateApplier, error)); ok {
		return rf(text)
	}
	if rf, ok := ret.Get(0).(func(string) elasticsearch.TemplateApplier); ok {
		r0 = rf(text)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(elasticsearch.TemplateApplier)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(text)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TemplateBuilder_Parse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Parse'
type TemplateBuilder_Parse_Call struct {
	*mock.Call
}

// Parse is a helper method to define mock.On call
//   - text string
func (_e *TemplateBuilder_Expecter) Parse(text interface{}) *TemplateBuilder_Parse_Call {
	return &TemplateBuilder_Parse_Call{Call: _e.mock.On("Parse", text)}
}

func (_c *TemplateBuilder_Parse_Call) Run(run func(text string)) *TemplateBuilder_Parse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *TemplateBuilder_Parse_Call) Return(_a0 elasticsearch.TemplateApplier, _a1 error) *TemplateBuilder_Parse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TemplateBuilder_Parse_Call) RunAndReturn(run func(string) (elasticsearch.TemplateApplier, error)) *TemplateBuilder_Parse_Call {
	_c.Call.Return(run)
	return _c
}

// NewTemplateBuilder creates a new instance of TemplateBuilder. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTemplateBuilder(t interface {
	mock.TestingT
	Cleanup(func())
}) *TemplateBuilder {
	mock := &TemplateBuilder{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

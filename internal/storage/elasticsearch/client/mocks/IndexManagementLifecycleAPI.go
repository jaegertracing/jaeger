// Copyright (c) The Jaeger Authors.
// SPDX-License-Identifier: Apache-2.0
//
// Run 'make generate-mocks' to regenerate.

// Code generated by mockery. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// IndexManagementLifecycleAPI is an autogenerated mock type for the IndexManagementLifecycleAPI type
type IndexManagementLifecycleAPI struct {
	mock.Mock
}

type IndexManagementLifecycleAPI_Expecter struct {
	mock *mock.Mock
}

func (_m *IndexManagementLifecycleAPI) EXPECT() *IndexManagementLifecycleAPI_Expecter {
	return &IndexManagementLifecycleAPI_Expecter{mock: &_m.Mock}
}

// Exists provides a mock function with given fields: name
func (_m *IndexManagementLifecycleAPI) Exists(name string) (bool, error) {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for Exists")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (bool, error)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IndexManagementLifecycleAPI_Exists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Exists'
type IndexManagementLifecycleAPI_Exists_Call struct {
	*mock.Call
}

// Exists is a helper method to define mock.On call
//   - name string
func (_e *IndexManagementLifecycleAPI_Expecter) Exists(name interface{}) *IndexManagementLifecycleAPI_Exists_Call {
	return &IndexManagementLifecycleAPI_Exists_Call{Call: _e.mock.On("Exists", name)}
}

func (_c *IndexManagementLifecycleAPI_Exists_Call) Run(run func(name string)) *IndexManagementLifecycleAPI_Exists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *IndexManagementLifecycleAPI_Exists_Call) Return(_a0 bool, _a1 error) *IndexManagementLifecycleAPI_Exists_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IndexManagementLifecycleAPI_Exists_Call) RunAndReturn(run func(string) (bool, error)) *IndexManagementLifecycleAPI_Exists_Call {
	_c.Call.Return(run)
	return _c
}

// NewIndexManagementLifecycleAPI creates a new instance of IndexManagementLifecycleAPI. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIndexManagementLifecycleAPI(t interface {
	mock.TestingT
	Cleanup(func())
}) *IndexManagementLifecycleAPI {
	mock := &IndexManagementLifecycleAPI{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Copyright (c) The Jaeger Authors.
// SPDX-License-Identifier: Apache-2.0
//
// Run 'make generate-mocks' to regenerate.

// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	client "github.com/jaegertracing/jaeger/internal/storage/elasticsearch/client"
	mock "github.com/stretchr/testify/mock"
)

// IndexAPI is an autogenerated mock type for the IndexAPI type
type IndexAPI struct {
	mock.Mock
}

type IndexAPI_Expecter struct {
	mock *mock.Mock
}

func (_m *IndexAPI) EXPECT() *IndexAPI_Expecter {
	return &IndexAPI_Expecter{mock: &_m.Mock}
}

// AliasExists provides a mock function with given fields: alias
func (_m *IndexAPI) AliasExists(alias string) (bool, error) {
	ret := _m.Called(alias)

	if len(ret) == 0 {
		panic("no return value specified for AliasExists")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (bool, error)); ok {
		return rf(alias)
	}
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(alias)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(alias)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IndexAPI_AliasExists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AliasExists'
type IndexAPI_AliasExists_Call struct {
	*mock.Call
}

// AliasExists is a helper method to define mock.On call
//   - alias string
func (_e *IndexAPI_Expecter) AliasExists(alias interface{}) *IndexAPI_AliasExists_Call {
	return &IndexAPI_AliasExists_Call{Call: _e.mock.On("AliasExists", alias)}
}

func (_c *IndexAPI_AliasExists_Call) Run(run func(alias string)) *IndexAPI_AliasExists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *IndexAPI_AliasExists_Call) Return(_a0 bool, _a1 error) *IndexAPI_AliasExists_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IndexAPI_AliasExists_Call) RunAndReturn(run func(string) (bool, error)) *IndexAPI_AliasExists_Call {
	_c.Call.Return(run)
	return _c
}

// CreateAlias provides a mock function with given fields: aliases
func (_m *IndexAPI) CreateAlias(aliases []client.Alias) error {
	ret := _m.Called(aliases)

	if len(ret) == 0 {
		panic("no return value specified for CreateAlias")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func([]client.Alias) error); ok {
		r0 = rf(aliases)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IndexAPI_CreateAlias_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateAlias'
type IndexAPI_CreateAlias_Call struct {
	*mock.Call
}

// CreateAlias is a helper method to define mock.On call
//   - aliases []client.Alias
func (_e *IndexAPI_Expecter) CreateAlias(aliases interface{}) *IndexAPI_CreateAlias_Call {
	return &IndexAPI_CreateAlias_Call{Call: _e.mock.On("CreateAlias", aliases)}
}

func (_c *IndexAPI_CreateAlias_Call) Run(run func(aliases []client.Alias)) *IndexAPI_CreateAlias_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]client.Alias))
	})
	return _c
}

func (_c *IndexAPI_CreateAlias_Call) Return(_a0 error) *IndexAPI_CreateAlias_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IndexAPI_CreateAlias_Call) RunAndReturn(run func([]client.Alias) error) *IndexAPI_CreateAlias_Call {
	_c.Call.Return(run)
	return _c
}

// CreateIndex provides a mock function with given fields: index
func (_m *IndexAPI) CreateIndex(index string) error {
	ret := _m.Called(index)

	if len(ret) == 0 {
		panic("no return value specified for CreateIndex")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(index)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IndexAPI_CreateIndex_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateIndex'
type IndexAPI_CreateIndex_Call struct {
	*mock.Call
}

// CreateIndex is a helper method to define mock.On call
//   - index string
func (_e *IndexAPI_Expecter) CreateIndex(index interface{}) *IndexAPI_CreateIndex_Call {
	return &IndexAPI_CreateIndex_Call{Call: _e.mock.On("CreateIndex", index)}
}

func (_c *IndexAPI_CreateIndex_Call) Run(run func(index string)) *IndexAPI_CreateIndex_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *IndexAPI_CreateIndex_Call) Return(_a0 error) *IndexAPI_CreateIndex_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IndexAPI_CreateIndex_Call) RunAndReturn(run func(string) error) *IndexAPI_CreateIndex_Call {
	_c.Call.Return(run)
	return _c
}

// CreateTemplate provides a mock function with given fields: template, name
func (_m *IndexAPI) CreateTemplate(template string, name string) error {
	ret := _m.Called(template, name)

	if len(ret) == 0 {
		panic("no return value specified for CreateTemplate")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(template, name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IndexAPI_CreateTemplate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateTemplate'
type IndexAPI_CreateTemplate_Call struct {
	*mock.Call
}

// CreateTemplate is a helper method to define mock.On call
//   - template string
//   - name string
func (_e *IndexAPI_Expecter) CreateTemplate(template interface{}, name interface{}) *IndexAPI_CreateTemplate_Call {
	return &IndexAPI_CreateTemplate_Call{Call: _e.mock.On("CreateTemplate", template, name)}
}

func (_c *IndexAPI_CreateTemplate_Call) Run(run func(template string, name string)) *IndexAPI_CreateTemplate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *IndexAPI_CreateTemplate_Call) Return(_a0 error) *IndexAPI_CreateTemplate_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IndexAPI_CreateTemplate_Call) RunAndReturn(run func(string, string) error) *IndexAPI_CreateTemplate_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteAlias provides a mock function with given fields: aliases
func (_m *IndexAPI) DeleteAlias(aliases []client.Alias) error {
	ret := _m.Called(aliases)

	if len(ret) == 0 {
		panic("no return value specified for DeleteAlias")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func([]client.Alias) error); ok {
		r0 = rf(aliases)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IndexAPI_DeleteAlias_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteAlias'
type IndexAPI_DeleteAlias_Call struct {
	*mock.Call
}

// DeleteAlias is a helper method to define mock.On call
//   - aliases []client.Alias
func (_e *IndexAPI_Expecter) DeleteAlias(aliases interface{}) *IndexAPI_DeleteAlias_Call {
	return &IndexAPI_DeleteAlias_Call{Call: _e.mock.On("DeleteAlias", aliases)}
}

func (_c *IndexAPI_DeleteAlias_Call) Run(run func(aliases []client.Alias)) *IndexAPI_DeleteAlias_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]client.Alias))
	})
	return _c
}

func (_c *IndexAPI_DeleteAlias_Call) Return(_a0 error) *IndexAPI_DeleteAlias_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IndexAPI_DeleteAlias_Call) RunAndReturn(run func([]client.Alias) error) *IndexAPI_DeleteAlias_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteIndices provides a mock function with given fields: indices
func (_m *IndexAPI) DeleteIndices(indices []client.Index) error {
	ret := _m.Called(indices)

	if len(ret) == 0 {
		panic("no return value specified for DeleteIndices")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func([]client.Index) error); ok {
		r0 = rf(indices)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IndexAPI_DeleteIndices_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteIndices'
type IndexAPI_DeleteIndices_Call struct {
	*mock.Call
}

// DeleteIndices is a helper method to define mock.On call
//   - indices []client.Index
func (_e *IndexAPI_Expecter) DeleteIndices(indices interface{}) *IndexAPI_DeleteIndices_Call {
	return &IndexAPI_DeleteIndices_Call{Call: _e.mock.On("DeleteIndices", indices)}
}

func (_c *IndexAPI_DeleteIndices_Call) Run(run func(indices []client.Index)) *IndexAPI_DeleteIndices_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]client.Index))
	})
	return _c
}

func (_c *IndexAPI_DeleteIndices_Call) Return(_a0 error) *IndexAPI_DeleteIndices_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IndexAPI_DeleteIndices_Call) RunAndReturn(run func([]client.Index) error) *IndexAPI_DeleteIndices_Call {
	_c.Call.Return(run)
	return _c
}

// GetJaegerIndices provides a mock function with given fields: prefix
func (_m *IndexAPI) GetJaegerIndices(prefix string) ([]client.Index, error) {
	ret := _m.Called(prefix)

	if len(ret) == 0 {
		panic("no return value specified for GetJaegerIndices")
	}

	var r0 []client.Index
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]client.Index, error)); ok {
		return rf(prefix)
	}
	if rf, ok := ret.Get(0).(func(string) []client.Index); ok {
		r0 = rf(prefix)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]client.Index)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(prefix)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IndexAPI_GetJaegerIndices_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetJaegerIndices'
type IndexAPI_GetJaegerIndices_Call struct {
	*mock.Call
}

// GetJaegerIndices is a helper method to define mock.On call
//   - prefix string
func (_e *IndexAPI_Expecter) GetJaegerIndices(prefix interface{}) *IndexAPI_GetJaegerIndices_Call {
	return &IndexAPI_GetJaegerIndices_Call{Call: _e.mock.On("GetJaegerIndices", prefix)}
}

func (_c *IndexAPI_GetJaegerIndices_Call) Run(run func(prefix string)) *IndexAPI_GetJaegerIndices_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *IndexAPI_GetJaegerIndices_Call) Return(_a0 []client.Index, _a1 error) *IndexAPI_GetJaegerIndices_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IndexAPI_GetJaegerIndices_Call) RunAndReturn(run func(string) ([]client.Index, error)) *IndexAPI_GetJaegerIndices_Call {
	_c.Call.Return(run)
	return _c
}

// IndexExists provides a mock function with given fields: index
func (_m *IndexAPI) IndexExists(index string) (bool, error) {
	ret := _m.Called(index)

	if len(ret) == 0 {
		panic("no return value specified for IndexExists")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (bool, error)); ok {
		return rf(index)
	}
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(index)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(index)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IndexAPI_IndexExists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IndexExists'
type IndexAPI_IndexExists_Call struct {
	*mock.Call
}

// IndexExists is a helper method to define mock.On call
//   - index string
func (_e *IndexAPI_Expecter) IndexExists(index interface{}) *IndexAPI_IndexExists_Call {
	return &IndexAPI_IndexExists_Call{Call: _e.mock.On("IndexExists", index)}
}

func (_c *IndexAPI_IndexExists_Call) Run(run func(index string)) *IndexAPI_IndexExists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *IndexAPI_IndexExists_Call) Return(_a0 bool, _a1 error) *IndexAPI_IndexExists_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IndexAPI_IndexExists_Call) RunAndReturn(run func(string) (bool, error)) *IndexAPI_IndexExists_Call {
	_c.Call.Return(run)
	return _c
}

// Rollover provides a mock function with given fields: rolloverTarget, conditions
func (_m *IndexAPI) Rollover(rolloverTarget string, conditions map[string]any) error {
	ret := _m.Called(rolloverTarget, conditions)

	if len(ret) == 0 {
		panic("no return value specified for Rollover")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, map[string]any) error); ok {
		r0 = rf(rolloverTarget, conditions)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IndexAPI_Rollover_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Rollover'
type IndexAPI_Rollover_Call struct {
	*mock.Call
}

// Rollover is a helper method to define mock.On call
//   - rolloverTarget string
//   - conditions map[string]any
func (_e *IndexAPI_Expecter) Rollover(rolloverTarget interface{}, conditions interface{}) *IndexAPI_Rollover_Call {
	return &IndexAPI_Rollover_Call{Call: _e.mock.On("Rollover", rolloverTarget, conditions)}
}

func (_c *IndexAPI_Rollover_Call) Run(run func(rolloverTarget string, conditions map[string]any)) *IndexAPI_Rollover_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(map[string]any))
	})
	return _c
}

func (_c *IndexAPI_Rollover_Call) Return(_a0 error) *IndexAPI_Rollover_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IndexAPI_Rollover_Call) RunAndReturn(run func(string, map[string]any) error) *IndexAPI_Rollover_Call {
	_c.Call.Return(run)
	return _c
}

// NewIndexAPI creates a new instance of IndexAPI. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIndexAPI(t interface {
	mock.TestingT
	Cleanup(func())
}) *IndexAPI {
	mock := &IndexAPI{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Copyright (c) The Jaeger Authors.
// SPDX-License-Identifier: Apache-2.0
//
// Run 'make generate-mocks' to regenerate.

// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	storage_v1 "github.com/jaegertracing/jaeger/internal/proto-gen/storage_v1"
	mock "github.com/stretchr/testify/mock"
)

// ArchiveSpanReaderPluginServer is an autogenerated mock type for the ArchiveSpanReaderPluginServer type
type ArchiveSpanReaderPluginServer struct {
	mock.Mock
}

type ArchiveSpanReaderPluginServer_Expecter struct {
	mock *mock.Mock
}

func (_m *ArchiveSpanReaderPluginServer) EXPECT() *ArchiveSpanReaderPluginServer_Expecter {
	return &ArchiveSpanReaderPluginServer_Expecter{mock: &_m.Mock}
}

// GetArchiveTrace provides a mock function with given fields: _a0, _a1
func (_m *ArchiveSpanReaderPluginServer) GetArchiveTrace(_a0 *storage_v1.GetTraceRequest, _a1 storage_v1.ArchiveSpanReaderPlugin_GetArchiveTraceServer) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetArchiveTrace")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*storage_v1.GetTraceRequest, storage_v1.ArchiveSpanReaderPlugin_GetArchiveTraceServer) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ArchiveSpanReaderPluginServer_GetArchiveTrace_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetArchiveTrace'
type ArchiveSpanReaderPluginServer_GetArchiveTrace_Call struct {
	*mock.Call
}

// GetArchiveTrace is a helper method to define mock.On call
//   - _a0 *storage_v1.GetTraceRequest
//   - _a1 storage_v1.ArchiveSpanReaderPlugin_GetArchiveTraceServer
func (_e *ArchiveSpanReaderPluginServer_Expecter) GetArchiveTrace(_a0 interface{}, _a1 interface{}) *ArchiveSpanReaderPluginServer_GetArchiveTrace_Call {
	return &ArchiveSpanReaderPluginServer_GetArchiveTrace_Call{Call: _e.mock.On("GetArchiveTrace", _a0, _a1)}
}

func (_c *ArchiveSpanReaderPluginServer_GetArchiveTrace_Call) Run(run func(_a0 *storage_v1.GetTraceRequest, _a1 storage_v1.ArchiveSpanReaderPlugin_GetArchiveTraceServer)) *ArchiveSpanReaderPluginServer_GetArchiveTrace_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*storage_v1.GetTraceRequest), args[1].(storage_v1.ArchiveSpanReaderPlugin_GetArchiveTraceServer))
	})
	return _c
}

func (_c *ArchiveSpanReaderPluginServer_GetArchiveTrace_Call) Return(_a0 error) *ArchiveSpanReaderPluginServer_GetArchiveTrace_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ArchiveSpanReaderPluginServer_GetArchiveTrace_Call) RunAndReturn(run func(*storage_v1.GetTraceRequest, storage_v1.ArchiveSpanReaderPlugin_GetArchiveTraceServer) error) *ArchiveSpanReaderPluginServer_GetArchiveTrace_Call {
	_c.Call.Return(run)
	return _c
}

// NewArchiveSpanReaderPluginServer creates a new instance of ArchiveSpanReaderPluginServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewArchiveSpanReaderPluginServer(t interface {
	mock.TestingT
	Cleanup(func())
}) *ArchiveSpanReaderPluginServer {
	mock := &ArchiveSpanReaderPluginServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

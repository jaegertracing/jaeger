// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: trace_storage.proto

package test

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TraceReader_GetTraces_FullMethodName     = "/jaeger.storage.v2.TraceReader/GetTraces"
	TraceReader_GetServices_FullMethodName   = "/jaeger.storage.v2.TraceReader/GetServices"
	TraceReader_GetOperations_FullMethodName = "/jaeger.storage.v2.TraceReader/GetOperations"
	TraceReader_FindTraces_FullMethodName    = "/jaeger.storage.v2.TraceReader/FindTraces"
	TraceReader_FindTraceIDs_FullMethodName  = "/jaeger.storage.v2.TraceReader/FindTraceIDs"
)

// TraceReaderClient is the client API for TraceReader service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// TraceReader is a service that allows reading traces from storage.
// Note that if you implement this service, you should also implement
// OTEL's TraceService in package opentelemetry.proto.collector.trace.v1
// to allow pushing traces to the storage backend
// (https://github.com/open-telemetry/opentelemetry-proto/blob/main/opentelemetry/proto/collector/trace/v1/trace_service.proto)
type TraceReaderClient interface {
	// GetTraces returns a stream that retrieves all traces with given IDs.
	//
	// Edge cases:
	// - If no spans are found for any given trace ID, the ID is ignored.
	// - If none of the trace IDs are found in the storage, an empty response is returned.
	GetTraces(ctx context.Context, in *GetTracesRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[TracesChunk], error)
	// GetServices returns all service names known to the backend from traces
	// within its retention period.
	GetServices(ctx context.Context, in *GetServicesRequest, opts ...grpc.CallOption) (*GetServicesResponse, error)
	// GetOperations returns all operation names for a given service
	// known to the backend from traces within its retention period.
	GetOperations(ctx context.Context, in *GetOperationsRequest, opts ...grpc.CallOption) (*GetOperationsResponse, error)
	// FindTraces returns a stream that retrieves traces matching query parameters.
	//
	// If no matching traces are found, an empty stream is returned.
	FindTraces(ctx context.Context, in *FindTracesRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[TracesChunk], error)
	// FindTraceIDs returns a stream that retrieves IDs of traces matching query parameters.
	//
	// If no matching traces are found, an empty stream is returned.
	//
	// This call behaves identically to FindTraces, except that it returns only the list
	// of matching trace IDs. This is useful in some contexts, such as batch jobs, where a
	// large list of trace IDs may be queried first and then the full traces are loaded
	// in batches.
	FindTraceIDs(ctx context.Context, in *FindTracesRequest, opts ...grpc.CallOption) (*FindTraceIDsResponse, error)
}

type traceReaderClient struct {
	cc grpc.ClientConnInterface
}

func NewTraceReaderClient(cc grpc.ClientConnInterface) TraceReaderClient {
	return &traceReaderClient{cc}
}

func (c *traceReaderClient) GetTraces(ctx context.Context, in *GetTracesRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[TracesChunk], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &TraceReader_ServiceDesc.Streams[0], TraceReader_GetTraces_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[GetTracesRequest, TracesChunk]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TraceReader_GetTracesClient = grpc.ServerStreamingClient[TracesChunk]

func (c *traceReaderClient) GetServices(ctx context.Context, in *GetServicesRequest, opts ...grpc.CallOption) (*GetServicesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetServicesResponse)
	err := c.cc.Invoke(ctx, TraceReader_GetServices_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *traceReaderClient) GetOperations(ctx context.Context, in *GetOperationsRequest, opts ...grpc.CallOption) (*GetOperationsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetOperationsResponse)
	err := c.cc.Invoke(ctx, TraceReader_GetOperations_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *traceReaderClient) FindTraces(ctx context.Context, in *FindTracesRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[TracesChunk], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &TraceReader_ServiceDesc.Streams[1], TraceReader_FindTraces_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[FindTracesRequest, TracesChunk]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TraceReader_FindTracesClient = grpc.ServerStreamingClient[TracesChunk]

func (c *traceReaderClient) FindTraceIDs(ctx context.Context, in *FindTracesRequest, opts ...grpc.CallOption) (*FindTraceIDsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FindTraceIDsResponse)
	err := c.cc.Invoke(ctx, TraceReader_FindTraceIDs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TraceReaderServer is the server API for TraceReader service.
// All implementations must embed UnimplementedTraceReaderServer
// for forward compatibility.
//
// TraceReader is a service that allows reading traces from storage.
// Note that if you implement this service, you should also implement
// OTEL's TraceService in package opentelemetry.proto.collector.trace.v1
// to allow pushing traces to the storage backend
// (https://github.com/open-telemetry/opentelemetry-proto/blob/main/opentelemetry/proto/collector/trace/v1/trace_service.proto)
type TraceReaderServer interface {
	// GetTraces returns a stream that retrieves all traces with given IDs.
	//
	// Edge cases:
	// - If no spans are found for any given trace ID, the ID is ignored.
	// - If none of the trace IDs are found in the storage, an empty response is returned.
	GetTraces(*GetTracesRequest, grpc.ServerStreamingServer[TracesChunk]) error
	// GetServices returns all service names known to the backend from traces
	// within its retention period.
	GetServices(context.Context, *GetServicesRequest) (*GetServicesResponse, error)
	// GetOperations returns all operation names for a given service
	// known to the backend from traces within its retention period.
	GetOperations(context.Context, *GetOperationsRequest) (*GetOperationsResponse, error)
	// FindTraces returns a stream that retrieves traces matching query parameters.
	//
	// If no matching traces are found, an empty stream is returned.
	FindTraces(*FindTracesRequest, grpc.ServerStreamingServer[TracesChunk]) error
	// FindTraceIDs returns a stream that retrieves IDs of traces matching query parameters.
	//
	// If no matching traces are found, an empty stream is returned.
	//
	// This call behaves identically to FindTraces, except that it returns only the list
	// of matching trace IDs. This is useful in some contexts, such as batch jobs, where a
	// large list of trace IDs may be queried first and then the full traces are loaded
	// in batches.
	FindTraceIDs(context.Context, *FindTracesRequest) (*FindTraceIDsResponse, error)
	mustEmbedUnimplementedTraceReaderServer()
}

// UnimplementedTraceReaderServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTraceReaderServer struct{}

func (UnimplementedTraceReaderServer) GetTraces(*GetTracesRequest, grpc.ServerStreamingServer[TracesChunk]) error {
	return status.Errorf(codes.Unimplemented, "method GetTraces not implemented")
}
func (UnimplementedTraceReaderServer) GetServices(context.Context, *GetServicesRequest) (*GetServicesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServices not implemented")
}
func (UnimplementedTraceReaderServer) GetOperations(context.Context, *GetOperationsRequest) (*GetOperationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOperations not implemented")
}
func (UnimplementedTraceReaderServer) FindTraces(*FindTracesRequest, grpc.ServerStreamingServer[TracesChunk]) error {
	return status.Errorf(codes.Unimplemented, "method FindTraces not implemented")
}
func (UnimplementedTraceReaderServer) FindTraceIDs(context.Context, *FindTracesRequest) (*FindTraceIDsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindTraceIDs not implemented")
}
func (UnimplementedTraceReaderServer) mustEmbedUnimplementedTraceReaderServer() {}
func (UnimplementedTraceReaderServer) testEmbeddedByValue()                     {}

// UnsafeTraceReaderServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TraceReaderServer will
// result in compilation errors.
type UnsafeTraceReaderServer interface {
	mustEmbedUnimplementedTraceReaderServer()
}

func RegisterTraceReaderServer(s grpc.ServiceRegistrar, srv TraceReaderServer) {
	// If the following call pancis, it indicates UnimplementedTraceReaderServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TraceReader_ServiceDesc, srv)
}

func _TraceReader_GetTraces_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetTracesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TraceReaderServer).GetTraces(m, &grpc.GenericServerStream[GetTracesRequest, TracesChunk]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TraceReader_GetTracesServer = grpc.ServerStreamingServer[TracesChunk]

func _TraceReader_GetServices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetServicesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TraceReaderServer).GetServices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TraceReader_GetServices_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TraceReaderServer).GetServices(ctx, req.(*GetServicesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TraceReader_GetOperations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOperationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TraceReaderServer).GetOperations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TraceReader_GetOperations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TraceReaderServer).GetOperations(ctx, req.(*GetOperationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TraceReader_FindTraces_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(FindTracesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TraceReaderServer).FindTraces(m, &grpc.GenericServerStream[FindTracesRequest, TracesChunk]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TraceReader_FindTracesServer = grpc.ServerStreamingServer[TracesChunk]

func _TraceReader_FindTraceIDs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindTracesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TraceReaderServer).FindTraceIDs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TraceReader_FindTraceIDs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TraceReaderServer).FindTraceIDs(ctx, req.(*FindTracesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TraceReader_ServiceDesc is the grpc.ServiceDesc for TraceReader service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TraceReader_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "jaeger.storage.v2.TraceReader",
	HandlerType: (*TraceReaderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetServices",
			Handler:    _TraceReader_GetServices_Handler,
		},
		{
			MethodName: "GetOperations",
			Handler:    _TraceReader_GetOperations_Handler,
		},
		{
			MethodName: "FindTraceIDs",
			Handler:    _TraceReader_FindTraceIDs_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetTraces",
			Handler:       _TraceReader_GetTraces_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "FindTraces",
			Handler:       _TraceReader_FindTraces_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "trace_storage.proto",
}

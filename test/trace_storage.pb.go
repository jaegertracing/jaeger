// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v5.29.3
// source: trace_storage.proto

package test

import (
	v1 "github.com/jaegertracing/jaeger/internal/jptrace"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// GetTraceParams represents the query for a single trace from the storage backend.
type GetTraceParams struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// trace_id is a 16 byte array containing the unique identifier for the trace to query.
	TraceId []byte `protobuf:"bytes,1,opt,name=trace_id,json=traceId,proto3" json:"trace_id,omitempty"`
	// start_time is the start of the time interval to search for the trace_id.
	//
	// This field is optional.
	StartTime *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	// end_time is the end of the time interval to search for the trace_id.
	//
	// This field is optional.
	EndTime       *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetTraceParams) Reset() {
	*x = GetTraceParams{}
	mi := &file_trace_storage_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTraceParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTraceParams) ProtoMessage() {}

func (x *GetTraceParams) ProtoReflect() protoreflect.Message {
	mi := &file_trace_storage_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTraceParams.ProtoReflect.Descriptor instead.
func (*GetTraceParams) Descriptor() ([]byte, []int) {
	return file_trace_storage_proto_rawDescGZIP(), []int{0}
}

func (x *GetTraceParams) GetTraceId() []byte {
	if x != nil {
		return x.TraceId
	}
	return nil
}

func (x *GetTraceParams) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *GetTraceParams) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

// GetTracesRequest represents a request to retrieve multiple traces.
type GetTracesRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Query         []*GetTraceParams      `protobuf:"bytes,1,rep,name=query,proto3" json:"query,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetTracesRequest) Reset() {
	*x = GetTracesRequest{}
	mi := &file_trace_storage_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTracesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTracesRequest) ProtoMessage() {}

func (x *GetTracesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_trace_storage_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTracesRequest.ProtoReflect.Descriptor instead.
func (*GetTracesRequest) Descriptor() ([]byte, []int) {
	return file_trace_storage_proto_rawDescGZIP(), []int{1}
}

func (x *GetTracesRequest) GetQuery() []*GetTraceParams {
	if x != nil {
		return x.Query
	}
	return nil
}

// GetServicesRequest represents a request to get service names.
type GetServicesRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetServicesRequest) Reset() {
	*x = GetServicesRequest{}
	mi := &file_trace_storage_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetServicesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetServicesRequest) ProtoMessage() {}

func (x *GetServicesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_trace_storage_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetServicesRequest.ProtoReflect.Descriptor instead.
func (*GetServicesRequest) Descriptor() ([]byte, []int) {
	return file_trace_storage_proto_rawDescGZIP(), []int{2}
}

// GetServicesResponse represents the response for GetServicesRequest.
type GetServicesResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Services      []string               `protobuf:"bytes,1,rep,name=services,proto3" json:"services,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetServicesResponse) Reset() {
	*x = GetServicesResponse{}
	mi := &file_trace_storage_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetServicesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetServicesResponse) ProtoMessage() {}

func (x *GetServicesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_trace_storage_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetServicesResponse.ProtoReflect.Descriptor instead.
func (*GetServicesResponse) Descriptor() ([]byte, []int) {
	return file_trace_storage_proto_rawDescGZIP(), []int{3}
}

func (x *GetServicesResponse) GetServices() []string {
	if x != nil {
		return x.Services
	}
	return nil
}

// GetOperationsRequest represents a request to get operation names.
type GetOperationsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// service is the name of the service for which to get operation names.
	//
	// This field is required.
	Service string `protobuf:"bytes,1,opt,name=service,proto3" json:"service,omitempty"`
	// span_kind is the type of span which is used to distinguish between
	// spans generated in a particular context.
	//
	// This field is optional.
	SpanKind      string `protobuf:"bytes,2,opt,name=span_kind,json=spanKind,proto3" json:"span_kind,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetOperationsRequest) Reset() {
	*x = GetOperationsRequest{}
	mi := &file_trace_storage_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetOperationsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOperationsRequest) ProtoMessage() {}

func (x *GetOperationsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_trace_storage_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOperationsRequest.ProtoReflect.Descriptor instead.
func (*GetOperationsRequest) Descriptor() ([]byte, []int) {
	return file_trace_storage_proto_rawDescGZIP(), []int{4}
}

func (x *GetOperationsRequest) GetService() string {
	if x != nil {
		return x.Service
	}
	return ""
}

func (x *GetOperationsRequest) GetSpanKind() string {
	if x != nil {
		return x.SpanKind
	}
	return ""
}

// Operation contains information about an operation for a given service.
type Operation struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	SpanKind      string                 `protobuf:"bytes,2,opt,name=span_kind,json=spanKind,proto3" json:"span_kind,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Operation) Reset() {
	*x = Operation{}
	mi := &file_trace_storage_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Operation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Operation) ProtoMessage() {}

func (x *Operation) ProtoReflect() protoreflect.Message {
	mi := &file_trace_storage_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Operation.ProtoReflect.Descriptor instead.
func (*Operation) Descriptor() ([]byte, []int) {
	return file_trace_storage_proto_rawDescGZIP(), []int{5}
}

func (x *Operation) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Operation) GetSpanKind() string {
	if x != nil {
		return x.SpanKind
	}
	return ""
}

// GetOperationsResponse represents the response for GetOperationsRequest.
type GetOperationsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Operations    []*Operation           `protobuf:"bytes,1,rep,name=operations,proto3" json:"operations,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetOperationsResponse) Reset() {
	*x = GetOperationsResponse{}
	mi := &file_trace_storage_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetOperationsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOperationsResponse) ProtoMessage() {}

func (x *GetOperationsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_trace_storage_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOperationsResponse.ProtoReflect.Descriptor instead.
func (*GetOperationsResponse) Descriptor() ([]byte, []int) {
	return file_trace_storage_proto_rawDescGZIP(), []int{6}
}

func (x *GetOperationsResponse) GetOperations() []*Operation {
	if x != nil {
		return x.Operations
	}
	return nil
}

// KeyValue and all its associated types are copied from opentelemetry-proto/common/v1/common.proto
// (https://github.com/open-telemetry/opentelemetry-proto/blob/main/opentelemetry/proto/common/v1/common.proto).
// This type is used to store attributes in traces.
type KeyValue struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Key           string                 `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value         *AnyValue              `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *KeyValue) Reset() {
	*x = KeyValue{}
	mi := &file_trace_storage_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KeyValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyValue) ProtoMessage() {}

func (x *KeyValue) ProtoReflect() protoreflect.Message {
	mi := &file_trace_storage_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyValue.ProtoReflect.Descriptor instead.
func (*KeyValue) Descriptor() ([]byte, []int) {
	return file_trace_storage_proto_rawDescGZIP(), []int{7}
}

func (x *KeyValue) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *KeyValue) GetValue() *AnyValue {
	if x != nil {
		return x.Value
	}
	return nil
}

type AnyValue struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Value:
	//
	//	*AnyValue_StringValue
	//	*AnyValue_BoolValue
	//	*AnyValue_IntValue
	//	*AnyValue_DoubleValue
	//	*AnyValue_ArrayValue
	//	*AnyValue_KvlistValue
	//	*AnyValue_BytesValue
	Value         isAnyValue_Value `protobuf_oneof:"value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AnyValue) Reset() {
	*x = AnyValue{}
	mi := &file_trace_storage_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AnyValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnyValue) ProtoMessage() {}

func (x *AnyValue) ProtoReflect() protoreflect.Message {
	mi := &file_trace_storage_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnyValue.ProtoReflect.Descriptor instead.
func (*AnyValue) Descriptor() ([]byte, []int) {
	return file_trace_storage_proto_rawDescGZIP(), []int{8}
}

func (x *AnyValue) GetValue() isAnyValue_Value {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *AnyValue) GetStringValue() string {
	if x != nil {
		if x, ok := x.Value.(*AnyValue_StringValue); ok {
			return x.StringValue
		}
	}
	return ""
}

func (x *AnyValue) GetBoolValue() bool {
	if x != nil {
		if x, ok := x.Value.(*AnyValue_BoolValue); ok {
			return x.BoolValue
		}
	}
	return false
}

func (x *AnyValue) GetIntValue() int64 {
	if x != nil {
		if x, ok := x.Value.(*AnyValue_IntValue); ok {
			return x.IntValue
		}
	}
	return 0
}

func (x *AnyValue) GetDoubleValue() float64 {
	if x != nil {
		if x, ok := x.Value.(*AnyValue_DoubleValue); ok {
			return x.DoubleValue
		}
	}
	return 0
}

func (x *AnyValue) GetArrayValue() *ArrayValue {
	if x != nil {
		if x, ok := x.Value.(*AnyValue_ArrayValue); ok {
			return x.ArrayValue
		}
	}
	return nil
}

func (x *AnyValue) GetKvlistValue() *KeyValueList {
	if x != nil {
		if x, ok := x.Value.(*AnyValue_KvlistValue); ok {
			return x.KvlistValue
		}
	}
	return nil
}

func (x *AnyValue) GetBytesValue() []byte {
	if x != nil {
		if x, ok := x.Value.(*AnyValue_BytesValue); ok {
			return x.BytesValue
		}
	}
	return nil
}

type isAnyValue_Value interface {
	isAnyValue_Value()
}

type AnyValue_StringValue struct {
	StringValue string `protobuf:"bytes,1,opt,name=string_value,json=stringValue,proto3,oneof"`
}

type AnyValue_BoolValue struct {
	BoolValue bool `protobuf:"varint,2,opt,name=bool_value,json=boolValue,proto3,oneof"`
}

type AnyValue_IntValue struct {
	IntValue int64 `protobuf:"varint,3,opt,name=int_value,json=intValue,proto3,oneof"`
}

type AnyValue_DoubleValue struct {
	DoubleValue float64 `protobuf:"fixed64,4,opt,name=double_value,json=doubleValue,proto3,oneof"`
}

type AnyValue_ArrayValue struct {
	ArrayValue *ArrayValue `protobuf:"bytes,5,opt,name=array_value,json=arrayValue,proto3,oneof"`
}

type AnyValue_KvlistValue struct {
	KvlistValue *KeyValueList `protobuf:"bytes,6,opt,name=kvlist_value,json=kvlistValue,proto3,oneof"`
}

type AnyValue_BytesValue struct {
	BytesValue []byte `protobuf:"bytes,7,opt,name=bytes_value,json=bytesValue,proto3,oneof"`
}

func (*AnyValue_StringValue) isAnyValue_Value() {}

func (*AnyValue_BoolValue) isAnyValue_Value() {}

func (*AnyValue_IntValue) isAnyValue_Value() {}

func (*AnyValue_DoubleValue) isAnyValue_Value() {}

func (*AnyValue_ArrayValue) isAnyValue_Value() {}

func (*AnyValue_KvlistValue) isAnyValue_Value() {}

func (*AnyValue_BytesValue) isAnyValue_Value() {}

type KeyValueList struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Values        []*KeyValue            `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *KeyValueList) Reset() {
	*x = KeyValueList{}
	mi := &file_trace_storage_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KeyValueList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyValueList) ProtoMessage() {}

func (x *KeyValueList) ProtoReflect() protoreflect.Message {
	mi := &file_trace_storage_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyValueList.ProtoReflect.Descriptor instead.
func (*KeyValueList) Descriptor() ([]byte, []int) {
	return file_trace_storage_proto_rawDescGZIP(), []int{9}
}

func (x *KeyValueList) GetValues() []*KeyValue {
	if x != nil {
		return x.Values
	}
	return nil
}

type ArrayValue struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Values        []*AnyValue            `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ArrayValue) Reset() {
	*x = ArrayValue{}
	mi := &file_trace_storage_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ArrayValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArrayValue) ProtoMessage() {}

func (x *ArrayValue) ProtoReflect() protoreflect.Message {
	mi := &file_trace_storage_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArrayValue.ProtoReflect.Descriptor instead.
func (*ArrayValue) Descriptor() ([]byte, []int) {
	return file_trace_storage_proto_rawDescGZIP(), []int{10}
}

func (x *ArrayValue) GetValues() []*AnyValue {
	if x != nil {
		return x.Values
	}
	return nil
}

// TraceQueryParameters contains query parameters to find traces. For a detailed
// definition of each field in this message, refer to `TraceQueryParameters` in `jaeger.api_v3`
// (https://github.com/jaegertracing/jaeger-idl/blob/main/proto/api_v3/query_service.proto).
type TraceQueryParameters struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ServiceName   string                 `protobuf:"bytes,1,opt,name=service_name,json=serviceName,proto3" json:"service_name,omitempty"`
	OperationName string                 `protobuf:"bytes,2,opt,name=operation_name,json=operationName,proto3" json:"operation_name,omitempty"`
	Attributes    []*KeyValue            `protobuf:"bytes,3,rep,name=attributes,proto3" json:"attributes,omitempty"`
	StartTimeMin  *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=start_time_min,json=startTimeMin,proto3" json:"start_time_min,omitempty"`
	StartTimeMax  *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=start_time_max,json=startTimeMax,proto3" json:"start_time_max,omitempty"`
	DurationMin   *durationpb.Duration   `protobuf:"bytes,6,opt,name=duration_min,json=durationMin,proto3" json:"duration_min,omitempty"`
	DurationMax   *durationpb.Duration   `protobuf:"bytes,7,opt,name=duration_max,json=durationMax,proto3" json:"duration_max,omitempty"`
	SearchDepth   int32                  `protobuf:"varint,8,opt,name=search_depth,json=searchDepth,proto3" json:"search_depth,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TraceQueryParameters) Reset() {
	*x = TraceQueryParameters{}
	mi := &file_trace_storage_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TraceQueryParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TraceQueryParameters) ProtoMessage() {}

func (x *TraceQueryParameters) ProtoReflect() protoreflect.Message {
	mi := &file_trace_storage_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TraceQueryParameters.ProtoReflect.Descriptor instead.
func (*TraceQueryParameters) Descriptor() ([]byte, []int) {
	return file_trace_storage_proto_rawDescGZIP(), []int{11}
}

func (x *TraceQueryParameters) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

func (x *TraceQueryParameters) GetOperationName() string {
	if x != nil {
		return x.OperationName
	}
	return ""
}

func (x *TraceQueryParameters) GetAttributes() []*KeyValue {
	if x != nil {
		return x.Attributes
	}
	return nil
}

func (x *TraceQueryParameters) GetStartTimeMin() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTimeMin
	}
	return nil
}

func (x *TraceQueryParameters) GetStartTimeMax() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTimeMax
	}
	return nil
}

func (x *TraceQueryParameters) GetDurationMin() *durationpb.Duration {
	if x != nil {
		return x.DurationMin
	}
	return nil
}

func (x *TraceQueryParameters) GetDurationMax() *durationpb.Duration {
	if x != nil {
		return x.DurationMax
	}
	return nil
}

func (x *TraceQueryParameters) GetSearchDepth() int32 {
	if x != nil {
		return x.SearchDepth
	}
	return 0
}

// FindTracesRequest represents a request to find traces.
// It can be used to retrieve the traces (FindTraces) or simply
// the trace IDs (FindTraceIDs).
type FindTracesRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Query         *TraceQueryParameters  `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FindTracesRequest) Reset() {
	*x = FindTracesRequest{}
	mi := &file_trace_storage_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FindTracesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindTracesRequest) ProtoMessage() {}

func (x *FindTracesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_trace_storage_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindTracesRequest.ProtoReflect.Descriptor instead.
func (*FindTracesRequest) Descriptor() ([]byte, []int) {
	return file_trace_storage_proto_rawDescGZIP(), []int{12}
}

func (x *FindTracesRequest) GetQuery() *TraceQueryParameters {
	if x != nil {
		return x.Query
	}
	return nil
}

// FoundTraceID is a wrapper around trace ID returned from FindTraceIDs
// with an optional time range that may be used in GetTraces calls.
//
// The time range is provided as an optimization hint for some storage backends
// that can perform more efficient queries when they know the approximate time range.
// The value should not be used for precise time-based filtering or assumptions.
// It is meant as a rough boundary and may not be populated in all cases.
type FoundTraceID struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TraceId       []byte                 `protobuf:"bytes,1,opt,name=trace_id,json=traceId,proto3" json:"trace_id,omitempty"`
	Start         *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=start,proto3" json:"start,omitempty"`
	End           *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=end,proto3" json:"end,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FoundTraceID) Reset() {
	*x = FoundTraceID{}
	mi := &file_trace_storage_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FoundTraceID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FoundTraceID) ProtoMessage() {}

func (x *FoundTraceID) ProtoReflect() protoreflect.Message {
	mi := &file_trace_storage_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FoundTraceID.ProtoReflect.Descriptor instead.
func (*FoundTraceID) Descriptor() ([]byte, []int) {
	return file_trace_storage_proto_rawDescGZIP(), []int{13}
}

func (x *FoundTraceID) GetTraceId() []byte {
	if x != nil {
		return x.TraceId
	}
	return nil
}

func (x *FoundTraceID) GetStart() *timestamppb.Timestamp {
	if x != nil {
		return x.Start
	}
	return nil
}

func (x *FoundTraceID) GetEnd() *timestamppb.Timestamp {
	if x != nil {
		return x.End
	}
	return nil
}

// FindTraceIDsResponse represents the response for FindTracesRequest.
type FindTraceIDsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TraceIds      []*FoundTraceID        `protobuf:"bytes,1,rep,name=trace_ids,json=traceIds,proto3" json:"trace_ids,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FindTraceIDsResponse) Reset() {
	*x = FindTraceIDsResponse{}
	mi := &file_trace_storage_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FindTraceIDsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindTraceIDsResponse) ProtoMessage() {}

func (x *FindTraceIDsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_trace_storage_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindTraceIDsResponse.ProtoReflect.Descriptor instead.
func (*FindTraceIDsResponse) Descriptor() ([]byte, []int) {
	return file_trace_storage_proto_rawDescGZIP(), []int{14}
}

func (x *FindTraceIDsResponse) GetTraceIds() []*FoundTraceID {
	if x != nil {
		return x.TraceIds
	}
	return nil
}

// TracesChunk is the payload type used in streaming responses that contain traces.
//
// It consists of a batch of trace data, where each TracesData object contains spans
// belonging to a single trace. Multiple traces may be included within a single TracesChunk.
//
// Chunking requirements:
// - Each TracesData object within TracesChunk MUST NOT contain spans from multiple traces.
// - Large individual traces MAY be split across multiple, *consecutive* TracesData objects.
// - Each TracesData object MUST NOT be empty.
type TracesChunk struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Traces        []*v1.TracesData       `protobuf:"bytes,1,rep,name=traces,proto3" json:"traces,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TracesChunk) Reset() {
	*x = TracesChunk{}
	mi := &file_trace_storage_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TracesChunk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TracesChunk) ProtoMessage() {}

func (x *TracesChunk) ProtoReflect() protoreflect.Message {
	mi := &file_trace_storage_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TracesChunk.ProtoReflect.Descriptor instead.
func (*TracesChunk) Descriptor() ([]byte, []int) {
	return file_trace_storage_proto_rawDescGZIP(), []int{15}
}

func (x *TracesChunk) GetTraces() []*v1.TracesData {
	if x != nil {
		return x.Traces
	}
	return nil
}

var File_trace_storage_proto protoreflect.FileDescriptor

const file_trace_storage_proto_rawDesc = "" +
	"\n" +
	"\x13trace_storage.proto\x12\x11jaeger.storage.v2\x1a\x1egoogle/protobuf/duration.proto\x1a\x1fgoogle/protobuf/timestamp.proto\x1a(opentelemetry/proto/trace/v1/trace.proto\"\x9d\x01\n" +
	"\x0eGetTraceParams\x12\x19\n" +
	"\btrace_id\x18\x01 \x01(\fR\atraceId\x129\n" +
	"\n" +
	"start_time\x18\x02 \x01(\v2\x1a.google.protobuf.TimestampR\tstartTime\x125\n" +
	"\bend_time\x18\x03 \x01(\v2\x1a.google.protobuf.TimestampR\aendTime\"K\n" +
	"\x10GetTracesRequest\x127\n" +
	"\x05query\x18\x01 \x03(\v2!.jaeger.storage.v2.GetTraceParamsR\x05query\"\x14\n" +
	"\x12GetServicesRequest\"1\n" +
	"\x13GetServicesResponse\x12\x1a\n" +
	"\bservices\x18\x01 \x03(\tR\bservices\"M\n" +
	"\x14GetOperationsRequest\x12\x18\n" +
	"\aservice\x18\x01 \x01(\tR\aservice\x12\x1b\n" +
	"\tspan_kind\x18\x02 \x01(\tR\bspanKind\"<\n" +
	"\tOperation\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x1b\n" +
	"\tspan_kind\x18\x02 \x01(\tR\bspanKind\"U\n" +
	"\x15GetOperationsResponse\x12<\n" +
	"\n" +
	"operations\x18\x01 \x03(\v2\x1c.jaeger.storage.v2.OperationR\n" +
	"operations\"O\n" +
	"\bKeyValue\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x121\n" +
	"\x05value\x18\x02 \x01(\v2\x1b.jaeger.storage.v2.AnyValueR\x05value\"\xc8\x02\n" +
	"\bAnyValue\x12#\n" +
	"\fstring_value\x18\x01 \x01(\tH\x00R\vstringValue\x12\x1f\n" +
	"\n" +
	"bool_value\x18\x02 \x01(\bH\x00R\tboolValue\x12\x1d\n" +
	"\tint_value\x18\x03 \x01(\x03H\x00R\bintValue\x12#\n" +
	"\fdouble_value\x18\x04 \x01(\x01H\x00R\vdoubleValue\x12@\n" +
	"\varray_value\x18\x05 \x01(\v2\x1d.jaeger.storage.v2.ArrayValueH\x00R\n" +
	"arrayValue\x12D\n" +
	"\fkvlist_value\x18\x06 \x01(\v2\x1f.jaeger.storage.v2.KeyValueListH\x00R\vkvlistValue\x12!\n" +
	"\vbytes_value\x18\a \x01(\fH\x00R\n" +
	"bytesValueB\a\n" +
	"\x05value\"C\n" +
	"\fKeyValueList\x123\n" +
	"\x06values\x18\x01 \x03(\v2\x1b.jaeger.storage.v2.KeyValueR\x06values\"A\n" +
	"\n" +
	"ArrayValue\x123\n" +
	"\x06values\x18\x01 \x03(\v2\x1b.jaeger.storage.v2.AnyValueR\x06values\"\xc0\x03\n" +
	"\x14TraceQueryParameters\x12!\n" +
	"\fservice_name\x18\x01 \x01(\tR\vserviceName\x12%\n" +
	"\x0eoperation_name\x18\x02 \x01(\tR\roperationName\x12;\n" +
	"\n" +
	"attributes\x18\x03 \x03(\v2\x1b.jaeger.storage.v2.KeyValueR\n" +
	"attributes\x12@\n" +
	"\x0estart_time_min\x18\x04 \x01(\v2\x1a.google.protobuf.TimestampR\fstartTimeMin\x12@\n" +
	"\x0estart_time_max\x18\x05 \x01(\v2\x1a.google.protobuf.TimestampR\fstartTimeMax\x12<\n" +
	"\fduration_min\x18\x06 \x01(\v2\x19.google.protobuf.DurationR\vdurationMin\x12<\n" +
	"\fduration_max\x18\a \x01(\v2\x19.google.protobuf.DurationR\vdurationMax\x12!\n" +
	"\fsearch_depth\x18\b \x01(\x05R\vsearchDepth\"R\n" +
	"\x11FindTracesRequest\x12=\n" +
	"\x05query\x18\x01 \x01(\v2'.jaeger.storage.v2.TraceQueryParametersR\x05query\"\x89\x01\n" +
	"\fFoundTraceID\x12\x19\n" +
	"\btrace_id\x18\x01 \x01(\fR\atraceId\x120\n" +
	"\x05start\x18\x02 \x01(\v2\x1a.google.protobuf.TimestampR\x05start\x12,\n" +
	"\x03end\x18\x03 \x01(\v2\x1a.google.protobuf.TimestampR\x03end\"T\n" +
	"\x14FindTraceIDsResponse\x12<\n" +
	"\ttrace_ids\x18\x01 \x03(\v2\x1f.jaeger.storage.v2.FoundTraceIDR\btraceIds\"O\n" +
	"\vTracesChunk\x12@\n" +
	"\x06traces\x18\x01 \x03(\v2(.opentelemetry.proto.trace.v1.TracesDataR\x06traces2\xe2\x03\n" +
	"\vTraceReader\x12T\n" +
	"\tGetTraces\x12#.jaeger.storage.v2.GetTracesRequest\x1a\x1e.jaeger.storage.v2.TracesChunk\"\x000\x01\x12^\n" +
	"\vGetServices\x12%.jaeger.storage.v2.GetServicesRequest\x1a&.jaeger.storage.v2.GetServicesResponse\"\x00\x12d\n" +
	"\rGetOperations\x12'.jaeger.storage.v2.GetOperationsRequest\x1a(.jaeger.storage.v2.GetOperationsResponse\"\x00\x12V\n" +
	"\n" +
	"FindTraces\x12$.jaeger.storage.v2.FindTracesRequest\x1a\x1e.jaeger.storage.v2.TracesChunk\"\x000\x01\x12_\n" +
	"\fFindTraceIDs\x12$.jaeger.storage.v2.FindTracesRequest\x1a'.jaeger.storage.v2.FindTraceIDsResponse\"\x00B\aZ\x05/testb\x06proto3"

var (
	file_trace_storage_proto_rawDescOnce sync.Once
	file_trace_storage_proto_rawDescData []byte
)

func file_trace_storage_proto_rawDescGZIP() []byte {
	file_trace_storage_proto_rawDescOnce.Do(func() {
		file_trace_storage_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_trace_storage_proto_rawDesc), len(file_trace_storage_proto_rawDesc)))
	})
	return file_trace_storage_proto_rawDescData
}

var file_trace_storage_proto_msgTypes = make([]protoimpl.MessageInfo, 16)
var file_trace_storage_proto_goTypes = []any{
	(*GetTraceParams)(nil),        // 0: jaeger.storage.v2.GetTraceParams
	(*GetTracesRequest)(nil),      // 1: jaeger.storage.v2.GetTracesRequest
	(*GetServicesRequest)(nil),    // 2: jaeger.storage.v2.GetServicesRequest
	(*GetServicesResponse)(nil),   // 3: jaeger.storage.v2.GetServicesResponse
	(*GetOperationsRequest)(nil),  // 4: jaeger.storage.v2.GetOperationsRequest
	(*Operation)(nil),             // 5: jaeger.storage.v2.Operation
	(*GetOperationsResponse)(nil), // 6: jaeger.storage.v2.GetOperationsResponse
	(*KeyValue)(nil),              // 7: jaeger.storage.v2.KeyValue
	(*AnyValue)(nil),              // 8: jaeger.storage.v2.AnyValue
	(*KeyValueList)(nil),          // 9: jaeger.storage.v2.KeyValueList
	(*ArrayValue)(nil),            // 10: jaeger.storage.v2.ArrayValue
	(*TraceQueryParameters)(nil),  // 11: jaeger.storage.v2.TraceQueryParameters
	(*FindTracesRequest)(nil),     // 12: jaeger.storage.v2.FindTracesRequest
	(*FoundTraceID)(nil),          // 13: jaeger.storage.v2.FoundTraceID
	(*FindTraceIDsResponse)(nil),  // 14: jaeger.storage.v2.FindTraceIDsResponse
	(*TracesChunk)(nil),           // 15: jaeger.storage.v2.TracesChunk
	(*timestamppb.Timestamp)(nil), // 16: google.protobuf.Timestamp
	(*durationpb.Duration)(nil),   // 17: google.protobuf.Duration
	(*v1.TracesData)(nil),         // 18: opentelemetry.proto.trace.v1.TracesData
}
var file_trace_storage_proto_depIdxs = []int32{
	16, // 0: jaeger.storage.v2.GetTraceParams.start_time:type_name -> google.protobuf.Timestamp
	16, // 1: jaeger.storage.v2.GetTraceParams.end_time:type_name -> google.protobuf.Timestamp
	0,  // 2: jaeger.storage.v2.GetTracesRequest.query:type_name -> jaeger.storage.v2.GetTraceParams
	5,  // 3: jaeger.storage.v2.GetOperationsResponse.operations:type_name -> jaeger.storage.v2.Operation
	8,  // 4: jaeger.storage.v2.KeyValue.value:type_name -> jaeger.storage.v2.AnyValue
	10, // 5: jaeger.storage.v2.AnyValue.array_value:type_name -> jaeger.storage.v2.ArrayValue
	9,  // 6: jaeger.storage.v2.AnyValue.kvlist_value:type_name -> jaeger.storage.v2.KeyValueList
	7,  // 7: jaeger.storage.v2.KeyValueList.values:type_name -> jaeger.storage.v2.KeyValue
	8,  // 8: jaeger.storage.v2.ArrayValue.values:type_name -> jaeger.storage.v2.AnyValue
	7,  // 9: jaeger.storage.v2.TraceQueryParameters.attributes:type_name -> jaeger.storage.v2.KeyValue
	16, // 10: jaeger.storage.v2.TraceQueryParameters.start_time_min:type_name -> google.protobuf.Timestamp
	16, // 11: jaeger.storage.v2.TraceQueryParameters.start_time_max:type_name -> google.protobuf.Timestamp
	17, // 12: jaeger.storage.v2.TraceQueryParameters.duration_min:type_name -> google.protobuf.Duration
	17, // 13: jaeger.storage.v2.TraceQueryParameters.duration_max:type_name -> google.protobuf.Duration
	11, // 14: jaeger.storage.v2.FindTracesRequest.query:type_name -> jaeger.storage.v2.TraceQueryParameters
	16, // 15: jaeger.storage.v2.FoundTraceID.start:type_name -> google.protobuf.Timestamp
	16, // 16: jaeger.storage.v2.FoundTraceID.end:type_name -> google.protobuf.Timestamp
	13, // 17: jaeger.storage.v2.FindTraceIDsResponse.trace_ids:type_name -> jaeger.storage.v2.FoundTraceID
	18, // 18: jaeger.storage.v2.TracesChunk.traces:type_name -> opentelemetry.proto.trace.v1.TracesData
	1,  // 19: jaeger.storage.v2.TraceReader.GetTraces:input_type -> jaeger.storage.v2.GetTracesRequest
	2,  // 20: jaeger.storage.v2.TraceReader.GetServices:input_type -> jaeger.storage.v2.GetServicesRequest
	4,  // 21: jaeger.storage.v2.TraceReader.GetOperations:input_type -> jaeger.storage.v2.GetOperationsRequest
	12, // 22: jaeger.storage.v2.TraceReader.FindTraces:input_type -> jaeger.storage.v2.FindTracesRequest
	12, // 23: jaeger.storage.v2.TraceReader.FindTraceIDs:input_type -> jaeger.storage.v2.FindTracesRequest
	15, // 24: jaeger.storage.v2.TraceReader.GetTraces:output_type -> jaeger.storage.v2.TracesChunk
	3,  // 25: jaeger.storage.v2.TraceReader.GetServices:output_type -> jaeger.storage.v2.GetServicesResponse
	6,  // 26: jaeger.storage.v2.TraceReader.GetOperations:output_type -> jaeger.storage.v2.GetOperationsResponse
	15, // 27: jaeger.storage.v2.TraceReader.FindTraces:output_type -> jaeger.storage.v2.TracesChunk
	14, // 28: jaeger.storage.v2.TraceReader.FindTraceIDs:output_type -> jaeger.storage.v2.FindTraceIDsResponse
	24, // [24:29] is the sub-list for method output_type
	19, // [19:24] is the sub-list for method input_type
	19, // [19:19] is the sub-list for extension type_name
	19, // [19:19] is the sub-list for extension extendee
	0,  // [0:19] is the sub-list for field type_name
}

func init() { file_trace_storage_proto_init() }
func file_trace_storage_proto_init() {
	if File_trace_storage_proto != nil {
		return
	}
	file_trace_storage_proto_msgTypes[8].OneofWrappers = []any{
		(*AnyValue_StringValue)(nil),
		(*AnyValue_BoolValue)(nil),
		(*AnyValue_IntValue)(nil),
		(*AnyValue_DoubleValue)(nil),
		(*AnyValue_ArrayValue)(nil),
		(*AnyValue_KvlistValue)(nil),
		(*AnyValue_BytesValue)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_trace_storage_proto_rawDesc), len(file_trace_storage_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   16,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_trace_storage_proto_goTypes,
		DependencyIndexes: file_trace_storage_proto_depIdxs,
		MessageInfos:      file_trace_storage_proto_msgTypes,
	}.Build()
	File_trace_storage_proto = out.File
	file_trace_storage_proto_goTypes = nil
	file_trace_storage_proto_depIdxs = nil
}
